// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: minisite.proto

package minisite

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MinisiteRpcService_UserCreate_FullMethodName           = "/minisite.MinisiteRpcService/UserCreate"
	MinisiteRpcService_UserUpdate_FullMethodName           = "/minisite.MinisiteRpcService/UserUpdate"
	MinisiteRpcService_UserDelete_FullMethodName           = "/minisite.MinisiteRpcService/UserDelete"
	MinisiteRpcService_UserDeleteIds_FullMethodName        = "/minisite.MinisiteRpcService/UserDeleteIds"
	MinisiteRpcService_UserQuery_FullMethodName            = "/minisite.MinisiteRpcService/UserQuery"
	MinisiteRpcService_UserQueryList_FullMethodName        = "/minisite.MinisiteRpcService/UserQueryList"
	MinisiteRpcService_UserUpdateStatus_FullMethodName     = "/minisite.MinisiteRpcService/UserUpdateStatus"
	MinisiteRpcService_MinisiteCreate_FullMethodName       = "/minisite.MinisiteRpcService/MinisiteCreate"
	MinisiteRpcService_MinisiteUpdate_FullMethodName       = "/minisite.MinisiteRpcService/MinisiteUpdate"
	MinisiteRpcService_MinisiteDelete_FullMethodName       = "/minisite.MinisiteRpcService/MinisiteDelete"
	MinisiteRpcService_MinisiteDeleteIds_FullMethodName    = "/minisite.MinisiteRpcService/MinisiteDeleteIds"
	MinisiteRpcService_MinisiteQuery_FullMethodName        = "/minisite.MinisiteRpcService/MinisiteQuery"
	MinisiteRpcService_MinisiteQueryList_FullMethodName    = "/minisite.MinisiteRpcService/MinisiteQueryList"
	MinisiteRpcService_MinisiteUpdateStatus_FullMethodName = "/minisite.MinisiteRpcService/MinisiteUpdateStatus"
)

// MinisiteRpcServiceClient is the client API for MinisiteRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MinisiteRpcServiceClient interface {
	UserCreate(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*Response, error)
	UserUpdate(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*Response, error)
	UserDelete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Response, error)
	UserDeleteIds(ctx context.Context, in *DeleteIdsReq, opts ...grpc.CallOption) (*Response, error)
	UserQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryUserResp, error)
	UserQueryList(ctx context.Context, in *QueryUserListReq, opts ...grpc.CallOption) (*QueryUserListResp, error)
	UserUpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*Response, error)
	MinisiteCreate(ctx context.Context, in *CreateMinisiteReq, opts ...grpc.CallOption) (*Response, error)
	MinisiteUpdate(ctx context.Context, in *UpdateMinisiteReq, opts ...grpc.CallOption) (*Response, error)
	MinisiteDelete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Response, error)
	MinisiteDeleteIds(ctx context.Context, in *DeleteIdsReq, opts ...grpc.CallOption) (*Response, error)
	MinisiteQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryMinisiteResp, error)
	MinisiteQueryList(ctx context.Context, in *QueryMinisiteListReq, opts ...grpc.CallOption) (*QueryMinisiteListResp, error)
	MinisiteUpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*Response, error)
}

type minisiteRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMinisiteRpcServiceClient(cc grpc.ClientConnInterface) MinisiteRpcServiceClient {
	return &minisiteRpcServiceClient{cc}
}

func (c *minisiteRpcServiceClient) UserCreate(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, MinisiteRpcService_UserCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minisiteRpcServiceClient) UserUpdate(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, MinisiteRpcService_UserUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minisiteRpcServiceClient) UserDelete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, MinisiteRpcService_UserDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minisiteRpcServiceClient) UserDeleteIds(ctx context.Context, in *DeleteIdsReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, MinisiteRpcService_UserDeleteIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minisiteRpcServiceClient) UserQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryUserResp, error) {
	out := new(QueryUserResp)
	err := c.cc.Invoke(ctx, MinisiteRpcService_UserQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minisiteRpcServiceClient) UserQueryList(ctx context.Context, in *QueryUserListReq, opts ...grpc.CallOption) (*QueryUserListResp, error) {
	out := new(QueryUserListResp)
	err := c.cc.Invoke(ctx, MinisiteRpcService_UserQueryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minisiteRpcServiceClient) UserUpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, MinisiteRpcService_UserUpdateStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minisiteRpcServiceClient) MinisiteCreate(ctx context.Context, in *CreateMinisiteReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, MinisiteRpcService_MinisiteCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minisiteRpcServiceClient) MinisiteUpdate(ctx context.Context, in *UpdateMinisiteReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, MinisiteRpcService_MinisiteUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minisiteRpcServiceClient) MinisiteDelete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, MinisiteRpcService_MinisiteDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minisiteRpcServiceClient) MinisiteDeleteIds(ctx context.Context, in *DeleteIdsReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, MinisiteRpcService_MinisiteDeleteIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minisiteRpcServiceClient) MinisiteQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryMinisiteResp, error) {
	out := new(QueryMinisiteResp)
	err := c.cc.Invoke(ctx, MinisiteRpcService_MinisiteQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minisiteRpcServiceClient) MinisiteQueryList(ctx context.Context, in *QueryMinisiteListReq, opts ...grpc.CallOption) (*QueryMinisiteListResp, error) {
	out := new(QueryMinisiteListResp)
	err := c.cc.Invoke(ctx, MinisiteRpcService_MinisiteQueryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minisiteRpcServiceClient) MinisiteUpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, MinisiteRpcService_MinisiteUpdateStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MinisiteRpcServiceServer is the server API for MinisiteRpcService service.
// All implementations must embed UnimplementedMinisiteRpcServiceServer
// for forward compatibility
type MinisiteRpcServiceServer interface {
	UserCreate(context.Context, *CreateUserReq) (*Response, error)
	UserUpdate(context.Context, *UpdateUserReq) (*Response, error)
	UserDelete(context.Context, *DeleteReq) (*Response, error)
	UserDeleteIds(context.Context, *DeleteIdsReq) (*Response, error)
	UserQuery(context.Context, *QueryReq) (*QueryUserResp, error)
	UserQueryList(context.Context, *QueryUserListReq) (*QueryUserListResp, error)
	UserUpdateStatus(context.Context, *UpdateStatusReq) (*Response, error)
	MinisiteCreate(context.Context, *CreateMinisiteReq) (*Response, error)
	MinisiteUpdate(context.Context, *UpdateMinisiteReq) (*Response, error)
	MinisiteDelete(context.Context, *DeleteReq) (*Response, error)
	MinisiteDeleteIds(context.Context, *DeleteIdsReq) (*Response, error)
	MinisiteQuery(context.Context, *QueryReq) (*QueryMinisiteResp, error)
	MinisiteQueryList(context.Context, *QueryMinisiteListReq) (*QueryMinisiteListResp, error)
	MinisiteUpdateStatus(context.Context, *UpdateStatusReq) (*Response, error)
	mustEmbedUnimplementedMinisiteRpcServiceServer()
}

// UnimplementedMinisiteRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMinisiteRpcServiceServer struct {
}

func (UnimplementedMinisiteRpcServiceServer) UserCreate(context.Context, *CreateUserReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCreate not implemented")
}
func (UnimplementedMinisiteRpcServiceServer) UserUpdate(context.Context, *UpdateUserReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdate not implemented")
}
func (UnimplementedMinisiteRpcServiceServer) UserDelete(context.Context, *DeleteReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDelete not implemented")
}
func (UnimplementedMinisiteRpcServiceServer) UserDeleteIds(context.Context, *DeleteIdsReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeleteIds not implemented")
}
func (UnimplementedMinisiteRpcServiceServer) UserQuery(context.Context, *QueryReq) (*QueryUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserQuery not implemented")
}
func (UnimplementedMinisiteRpcServiceServer) UserQueryList(context.Context, *QueryUserListReq) (*QueryUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserQueryList not implemented")
}
func (UnimplementedMinisiteRpcServiceServer) UserUpdateStatus(context.Context, *UpdateStatusReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdateStatus not implemented")
}
func (UnimplementedMinisiteRpcServiceServer) MinisiteCreate(context.Context, *CreateMinisiteReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinisiteCreate not implemented")
}
func (UnimplementedMinisiteRpcServiceServer) MinisiteUpdate(context.Context, *UpdateMinisiteReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinisiteUpdate not implemented")
}
func (UnimplementedMinisiteRpcServiceServer) MinisiteDelete(context.Context, *DeleteReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinisiteDelete not implemented")
}
func (UnimplementedMinisiteRpcServiceServer) MinisiteDeleteIds(context.Context, *DeleteIdsReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinisiteDeleteIds not implemented")
}
func (UnimplementedMinisiteRpcServiceServer) MinisiteQuery(context.Context, *QueryReq) (*QueryMinisiteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinisiteQuery not implemented")
}
func (UnimplementedMinisiteRpcServiceServer) MinisiteQueryList(context.Context, *QueryMinisiteListReq) (*QueryMinisiteListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinisiteQueryList not implemented")
}
func (UnimplementedMinisiteRpcServiceServer) MinisiteUpdateStatus(context.Context, *UpdateStatusReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinisiteUpdateStatus not implemented")
}
func (UnimplementedMinisiteRpcServiceServer) mustEmbedUnimplementedMinisiteRpcServiceServer() {}

// UnsafeMinisiteRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MinisiteRpcServiceServer will
// result in compilation errors.
type UnsafeMinisiteRpcServiceServer interface {
	mustEmbedUnimplementedMinisiteRpcServiceServer()
}

func RegisterMinisiteRpcServiceServer(s grpc.ServiceRegistrar, srv MinisiteRpcServiceServer) {
	s.RegisterService(&MinisiteRpcService_ServiceDesc, srv)
}

func _MinisiteRpcService_UserCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinisiteRpcServiceServer).UserCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MinisiteRpcService_UserCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinisiteRpcServiceServer).UserCreate(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinisiteRpcService_UserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinisiteRpcServiceServer).UserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MinisiteRpcService_UserUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinisiteRpcServiceServer).UserUpdate(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinisiteRpcService_UserDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinisiteRpcServiceServer).UserDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MinisiteRpcService_UserDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinisiteRpcServiceServer).UserDelete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinisiteRpcService_UserDeleteIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinisiteRpcServiceServer).UserDeleteIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MinisiteRpcService_UserDeleteIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinisiteRpcServiceServer).UserDeleteIds(ctx, req.(*DeleteIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinisiteRpcService_UserQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinisiteRpcServiceServer).UserQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MinisiteRpcService_UserQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinisiteRpcServiceServer).UserQuery(ctx, req.(*QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinisiteRpcService_UserQueryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinisiteRpcServiceServer).UserQueryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MinisiteRpcService_UserQueryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinisiteRpcServiceServer).UserQueryList(ctx, req.(*QueryUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinisiteRpcService_UserUpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinisiteRpcServiceServer).UserUpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MinisiteRpcService_UserUpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinisiteRpcServiceServer).UserUpdateStatus(ctx, req.(*UpdateStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinisiteRpcService_MinisiteCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMinisiteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinisiteRpcServiceServer).MinisiteCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MinisiteRpcService_MinisiteCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinisiteRpcServiceServer).MinisiteCreate(ctx, req.(*CreateMinisiteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinisiteRpcService_MinisiteUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMinisiteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinisiteRpcServiceServer).MinisiteUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MinisiteRpcService_MinisiteUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinisiteRpcServiceServer).MinisiteUpdate(ctx, req.(*UpdateMinisiteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinisiteRpcService_MinisiteDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinisiteRpcServiceServer).MinisiteDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MinisiteRpcService_MinisiteDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinisiteRpcServiceServer).MinisiteDelete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinisiteRpcService_MinisiteDeleteIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinisiteRpcServiceServer).MinisiteDeleteIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MinisiteRpcService_MinisiteDeleteIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinisiteRpcServiceServer).MinisiteDeleteIds(ctx, req.(*DeleteIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinisiteRpcService_MinisiteQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinisiteRpcServiceServer).MinisiteQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MinisiteRpcService_MinisiteQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinisiteRpcServiceServer).MinisiteQuery(ctx, req.(*QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinisiteRpcService_MinisiteQueryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMinisiteListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinisiteRpcServiceServer).MinisiteQueryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MinisiteRpcService_MinisiteQueryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinisiteRpcServiceServer).MinisiteQueryList(ctx, req.(*QueryMinisiteListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinisiteRpcService_MinisiteUpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinisiteRpcServiceServer).MinisiteUpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MinisiteRpcService_MinisiteUpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinisiteRpcServiceServer).MinisiteUpdateStatus(ctx, req.(*UpdateStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MinisiteRpcService_ServiceDesc is the grpc.ServiceDesc for MinisiteRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MinisiteRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "minisite.MinisiteRpcService",
	HandlerType: (*MinisiteRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserCreate",
			Handler:    _MinisiteRpcService_UserCreate_Handler,
		},
		{
			MethodName: "UserUpdate",
			Handler:    _MinisiteRpcService_UserUpdate_Handler,
		},
		{
			MethodName: "UserDelete",
			Handler:    _MinisiteRpcService_UserDelete_Handler,
		},
		{
			MethodName: "UserDeleteIds",
			Handler:    _MinisiteRpcService_UserDeleteIds_Handler,
		},
		{
			MethodName: "UserQuery",
			Handler:    _MinisiteRpcService_UserQuery_Handler,
		},
		{
			MethodName: "UserQueryList",
			Handler:    _MinisiteRpcService_UserQueryList_Handler,
		},
		{
			MethodName: "UserUpdateStatus",
			Handler:    _MinisiteRpcService_UserUpdateStatus_Handler,
		},
		{
			MethodName: "MinisiteCreate",
			Handler:    _MinisiteRpcService_MinisiteCreate_Handler,
		},
		{
			MethodName: "MinisiteUpdate",
			Handler:    _MinisiteRpcService_MinisiteUpdate_Handler,
		},
		{
			MethodName: "MinisiteDelete",
			Handler:    _MinisiteRpcService_MinisiteDelete_Handler,
		},
		{
			MethodName: "MinisiteDeleteIds",
			Handler:    _MinisiteRpcService_MinisiteDeleteIds_Handler,
		},
		{
			MethodName: "MinisiteQuery",
			Handler:    _MinisiteRpcService_MinisiteQuery_Handler,
		},
		{
			MethodName: "MinisiteQueryList",
			Handler:    _MinisiteRpcService_MinisiteQueryList_Handler,
		},
		{
			MethodName: "MinisiteUpdateStatus",
			Handler:    _MinisiteRpcService_MinisiteUpdateStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "minisite.proto",
}
