// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: aiot-rpc-service/aiot-rpc-service.proto

package aiot

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ModelUV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	U int64 `protobuf:"varint,1,opt,name=u,proto3" json:"u,omitempty"`
	V int64 `protobuf:"varint,2,opt,name=v,proto3" json:"v,omitempty"`
}

func (x *ModelUV) Reset() {
	*x = ModelUV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelUV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelUV) ProtoMessage() {}

func (x *ModelUV) ProtoReflect() protoreflect.Message {
	mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelUV.ProtoReflect.Descriptor instead.
func (*ModelUV) Descriptor() ([]byte, []int) {
	return file_aiot_rpc_service_aiot_rpc_service_proto_rawDescGZIP(), []int{0}
}

func (x *ModelUV) GetU() int64 {
	if x != nil {
		return x.U
	}
	return 0
}

func (x *ModelUV) GetV() int64 {
	if x != nil {
		return x.V
	}
	return 0
}

type ModelTempUV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	U string `protobuf:"bytes,1,opt,name=u,proto3" json:"u,omitempty"`
	T int64  `protobuf:"varint,2,opt,name=t,proto3" json:"t,omitempty"`
	V int64  `protobuf:"varint,3,opt,name=v,proto3" json:"v,omitempty"`
}

func (x *ModelTempUV) Reset() {
	*x = ModelTempUV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelTempUV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelTempUV) ProtoMessage() {}

func (x *ModelTempUV) ProtoReflect() protoreflect.Message {
	mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelTempUV.ProtoReflect.Descriptor instead.
func (*ModelTempUV) Descriptor() ([]byte, []int) {
	return file_aiot_rpc_service_aiot_rpc_service_proto_rawDescGZIP(), []int{1}
}

func (x *ModelTempUV) GetU() string {
	if x != nil {
		return x.U
	}
	return ""
}

func (x *ModelTempUV) GetT() int64 {
	if x != nil {
		return x.T
	}
	return 0
}

func (x *ModelTempUV) GetV() int64 {
	if x != nil {
		return x.V
	}
	return 0
}

type JStyleDeviceHeartOneParseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key          string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	SyncDateTime int64  `protobuf:"varint,2,opt,name=syncDateTime,proto3" json:"syncDateTime,omitempty"`
	Data         string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *JStyleDeviceHeartOneParseReq) Reset() {
	*x = JStyleDeviceHeartOneParseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JStyleDeviceHeartOneParseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JStyleDeviceHeartOneParseReq) ProtoMessage() {}

func (x *JStyleDeviceHeartOneParseReq) ProtoReflect() protoreflect.Message {
	mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JStyleDeviceHeartOneParseReq.ProtoReflect.Descriptor instead.
func (*JStyleDeviceHeartOneParseReq) Descriptor() ([]byte, []int) {
	return file_aiot_rpc_service_aiot_rpc_service_proto_rawDescGZIP(), []int{2}
}

func (x *JStyleDeviceHeartOneParseReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *JStyleDeviceHeartOneParseReq) GetSyncDateTime() int64 {
	if x != nil {
		return x.SyncDateTime
	}
	return 0
}

func (x *JStyleDeviceHeartOneParseReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type JStyleDeviceHeartOneParseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32                           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg       string                          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	RequestID string                          `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Path      string                          `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Data      *JStyleDeviceHeartParseRespData `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *JStyleDeviceHeartOneParseResp) Reset() {
	*x = JStyleDeviceHeartOneParseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JStyleDeviceHeartOneParseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JStyleDeviceHeartOneParseResp) ProtoMessage() {}

func (x *JStyleDeviceHeartOneParseResp) ProtoReflect() protoreflect.Message {
	mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JStyleDeviceHeartOneParseResp.ProtoReflect.Descriptor instead.
func (*JStyleDeviceHeartOneParseResp) Descriptor() ([]byte, []int) {
	return file_aiot_rpc_service_aiot_rpc_service_proto_rawDescGZIP(), []int{3}
}

func (x *JStyleDeviceHeartOneParseResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *JStyleDeviceHeartOneParseResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *JStyleDeviceHeartOneParseResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *JStyleDeviceHeartOneParseResp) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *JStyleDeviceHeartOneParseResp) GetData() *JStyleDeviceHeartParseRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type JStyleDeviceHeartParseRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime        string                        `protobuf:"bytes,1,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime          string                        `protobuf:"bytes,2,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	List             []*JStyleDeviceHeartModelData `protobuf:"bytes,3,rep,name=List,proto3" json:"List,omitempty"`
	AverageHeartRate int64                         `protobuf:"varint,4,opt,name=averageHeartRate,proto3" json:"averageHeartRate,omitempty"`
}

func (x *JStyleDeviceHeartParseRespData) Reset() {
	*x = JStyleDeviceHeartParseRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JStyleDeviceHeartParseRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JStyleDeviceHeartParseRespData) ProtoMessage() {}

func (x *JStyleDeviceHeartParseRespData) ProtoReflect() protoreflect.Message {
	mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JStyleDeviceHeartParseRespData.ProtoReflect.Descriptor instead.
func (*JStyleDeviceHeartParseRespData) Descriptor() ([]byte, []int) {
	return file_aiot_rpc_service_aiot_rpc_service_proto_rawDescGZIP(), []int{4}
}

func (x *JStyleDeviceHeartParseRespData) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *JStyleDeviceHeartParseRespData) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *JStyleDeviceHeartParseRespData) GetList() []*JStyleDeviceHeartModelData {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *JStyleDeviceHeartParseRespData) GetAverageHeartRate() int64 {
	if x != nil {
		return x.AverageHeartRate
	}
	return 0
}

type JStyleDeviceHeartModelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime        string     `protobuf:"bytes,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime          string     `protobuf:"bytes,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Len              int32      `protobuf:"varint,3,opt,name=len,proto3" json:"len,omitempty"`
	RawData          []*ModelUV `protobuf:"bytes,4,rep,name=rawData,proto3" json:"rawData,omitempty"`
	AverageHeartRate int64      `protobuf:"varint,5,opt,name=averageHeartRate,proto3" json:"averageHeartRate,omitempty"`
}

func (x *JStyleDeviceHeartModelData) Reset() {
	*x = JStyleDeviceHeartModelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JStyleDeviceHeartModelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JStyleDeviceHeartModelData) ProtoMessage() {}

func (x *JStyleDeviceHeartModelData) ProtoReflect() protoreflect.Message {
	mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JStyleDeviceHeartModelData.ProtoReflect.Descriptor instead.
func (*JStyleDeviceHeartModelData) Descriptor() ([]byte, []int) {
	return file_aiot_rpc_service_aiot_rpc_service_proto_rawDescGZIP(), []int{5}
}

func (x *JStyleDeviceHeartModelData) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *JStyleDeviceHeartModelData) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *JStyleDeviceHeartModelData) GetLen() int32 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *JStyleDeviceHeartModelData) GetRawData() []*ModelUV {
	if x != nil {
		return x.RawData
	}
	return nil
}

func (x *JStyleDeviceHeartModelData) GetAverageHeartRate() int64 {
	if x != nil {
		return x.AverageHeartRate
	}
	return 0
}

type JStyleDeviceHeartParseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key          string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	SyncDateTime int64  `protobuf:"varint,2,opt,name=syncDateTime,proto3" json:"syncDateTime,omitempty"`
	Data         string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *JStyleDeviceHeartParseReq) Reset() {
	*x = JStyleDeviceHeartParseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JStyleDeviceHeartParseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JStyleDeviceHeartParseReq) ProtoMessage() {}

func (x *JStyleDeviceHeartParseReq) ProtoReflect() protoreflect.Message {
	mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JStyleDeviceHeartParseReq.ProtoReflect.Descriptor instead.
func (*JStyleDeviceHeartParseReq) Descriptor() ([]byte, []int) {
	return file_aiot_rpc_service_aiot_rpc_service_proto_rawDescGZIP(), []int{6}
}

func (x *JStyleDeviceHeartParseReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *JStyleDeviceHeartParseReq) GetSyncDateTime() int64 {
	if x != nil {
		return x.SyncDateTime
	}
	return 0
}

func (x *JStyleDeviceHeartParseReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type JStyleDeviceHeartParseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32                           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg       string                          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	RequestID string                          `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Path      string                          `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Data      *JStyleDeviceHeartParseRespData `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *JStyleDeviceHeartParseResp) Reset() {
	*x = JStyleDeviceHeartParseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JStyleDeviceHeartParseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JStyleDeviceHeartParseResp) ProtoMessage() {}

func (x *JStyleDeviceHeartParseResp) ProtoReflect() protoreflect.Message {
	mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JStyleDeviceHeartParseResp.ProtoReflect.Descriptor instead.
func (*JStyleDeviceHeartParseResp) Descriptor() ([]byte, []int) {
	return file_aiot_rpc_service_aiot_rpc_service_proto_rawDescGZIP(), []int{7}
}

func (x *JStyleDeviceHeartParseResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *JStyleDeviceHeartParseResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *JStyleDeviceHeartParseResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *JStyleDeviceHeartParseResp) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *JStyleDeviceHeartParseResp) GetData() *JStyleDeviceHeartParseRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type JStyleDeviceStepParseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key          string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	SyncDateTime int64  `protobuf:"varint,2,opt,name=syncDateTime,proto3" json:"syncDateTime,omitempty"`
	Data         string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *JStyleDeviceStepParseReq) Reset() {
	*x = JStyleDeviceStepParseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JStyleDeviceStepParseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JStyleDeviceStepParseReq) ProtoMessage() {}

func (x *JStyleDeviceStepParseReq) ProtoReflect() protoreflect.Message {
	mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JStyleDeviceStepParseReq.ProtoReflect.Descriptor instead.
func (*JStyleDeviceStepParseReq) Descriptor() ([]byte, []int) {
	return file_aiot_rpc_service_aiot_rpc_service_proto_rawDescGZIP(), []int{8}
}

func (x *JStyleDeviceStepParseReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *JStyleDeviceStepParseReq) GetSyncDateTime() int64 {
	if x != nil {
		return x.SyncDateTime
	}
	return 0
}

func (x *JStyleDeviceStepParseReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type JStyleDeviceStepParseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32                          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg       string                         `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	RequestID string                         `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Path      string                         `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Data      *JStyleDeviceStepParseRespData `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *JStyleDeviceStepParseResp) Reset() {
	*x = JStyleDeviceStepParseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JStyleDeviceStepParseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JStyleDeviceStepParseResp) ProtoMessage() {}

func (x *JStyleDeviceStepParseResp) ProtoReflect() protoreflect.Message {
	mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JStyleDeviceStepParseResp.ProtoReflect.Descriptor instead.
func (*JStyleDeviceStepParseResp) Descriptor() ([]byte, []int) {
	return file_aiot_rpc_service_aiot_rpc_service_proto_rawDescGZIP(), []int{9}
}

func (x *JStyleDeviceStepParseResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *JStyleDeviceStepParseResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *JStyleDeviceStepParseResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *JStyleDeviceStepParseResp) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *JStyleDeviceStepParseResp) GetData() *JStyleDeviceStepParseRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type JStyleDeviceStepParseRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime string                       `protobuf:"bytes,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   string                       `protobuf:"bytes,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
	List      []*JStyleDeviceStepModelData `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
	Step      int32                        `protobuf:"varint,4,opt,name=step,proto3" json:"step,omitempty"`
	Calorie   float32                      `protobuf:"fixed32,5,opt,name=calorie,proto3" json:"calorie,omitempty"`
	Distance  float32                      `protobuf:"fixed32,6,opt,name=distance,proto3" json:"distance,omitempty"`
}

func (x *JStyleDeviceStepParseRespData) Reset() {
	*x = JStyleDeviceStepParseRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JStyleDeviceStepParseRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JStyleDeviceStepParseRespData) ProtoMessage() {}

func (x *JStyleDeviceStepParseRespData) ProtoReflect() protoreflect.Message {
	mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JStyleDeviceStepParseRespData.ProtoReflect.Descriptor instead.
func (*JStyleDeviceStepParseRespData) Descriptor() ([]byte, []int) {
	return file_aiot_rpc_service_aiot_rpc_service_proto_rawDescGZIP(), []int{10}
}

func (x *JStyleDeviceStepParseRespData) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *JStyleDeviceStepParseRespData) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *JStyleDeviceStepParseRespData) GetList() []*JStyleDeviceStepModelData {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *JStyleDeviceStepParseRespData) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *JStyleDeviceStepParseRespData) GetCalorie() float32 {
	if x != nil {
		return x.Calorie
	}
	return 0
}

func (x *JStyleDeviceStepParseRespData) GetDistance() float32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

type JStyleDeviceStepModelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime string     `protobuf:"bytes,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   string     `protobuf:"bytes,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Len       int32      `protobuf:"varint,3,opt,name=len,proto3" json:"len,omitempty"`
	RawData   []*ModelUV `protobuf:"bytes,4,rep,name=rawData,proto3" json:"rawData,omitempty"`
	Step      int32      `protobuf:"varint,5,opt,name=step,proto3" json:"step,omitempty"`
	Calorie   float32    `protobuf:"fixed32,6,opt,name=calorie,proto3" json:"calorie,omitempty"`
	Distance  float32    `protobuf:"fixed32,7,opt,name=distance,proto3" json:"distance,omitempty"`
}

func (x *JStyleDeviceStepModelData) Reset() {
	*x = JStyleDeviceStepModelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JStyleDeviceStepModelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JStyleDeviceStepModelData) ProtoMessage() {}

func (x *JStyleDeviceStepModelData) ProtoReflect() protoreflect.Message {
	mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JStyleDeviceStepModelData.ProtoReflect.Descriptor instead.
func (*JStyleDeviceStepModelData) Descriptor() ([]byte, []int) {
	return file_aiot_rpc_service_aiot_rpc_service_proto_rawDescGZIP(), []int{11}
}

func (x *JStyleDeviceStepModelData) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *JStyleDeviceStepModelData) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *JStyleDeviceStepModelData) GetLen() int32 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *JStyleDeviceStepModelData) GetRawData() []*ModelUV {
	if x != nil {
		return x.RawData
	}
	return nil
}

func (x *JStyleDeviceStepModelData) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *JStyleDeviceStepModelData) GetCalorie() float32 {
	if x != nil {
		return x.Calorie
	}
	return 0
}

func (x *JStyleDeviceStepModelData) GetDistance() float32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

type JStyleDeviceSleepParseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key          string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	SyncDateTime int64  `protobuf:"varint,2,opt,name=syncDateTime,proto3" json:"syncDateTime,omitempty"`
	Data         string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *JStyleDeviceSleepParseReq) Reset() {
	*x = JStyleDeviceSleepParseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JStyleDeviceSleepParseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JStyleDeviceSleepParseReq) ProtoMessage() {}

func (x *JStyleDeviceSleepParseReq) ProtoReflect() protoreflect.Message {
	mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JStyleDeviceSleepParseReq.ProtoReflect.Descriptor instead.
func (*JStyleDeviceSleepParseReq) Descriptor() ([]byte, []int) {
	return file_aiot_rpc_service_aiot_rpc_service_proto_rawDescGZIP(), []int{12}
}

func (x *JStyleDeviceSleepParseReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *JStyleDeviceSleepParseReq) GetSyncDateTime() int64 {
	if x != nil {
		return x.SyncDateTime
	}
	return 0
}

func (x *JStyleDeviceSleepParseReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type JStyleDeviceSleepParseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32                           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg       string                          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	RequestID string                          `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Path      string                          `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Data      *JStyleDeviceSleepParseRespData `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *JStyleDeviceSleepParseResp) Reset() {
	*x = JStyleDeviceSleepParseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JStyleDeviceSleepParseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JStyleDeviceSleepParseResp) ProtoMessage() {}

func (x *JStyleDeviceSleepParseResp) ProtoReflect() protoreflect.Message {
	mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JStyleDeviceSleepParseResp.ProtoReflect.Descriptor instead.
func (*JStyleDeviceSleepParseResp) Descriptor() ([]byte, []int) {
	return file_aiot_rpc_service_aiot_rpc_service_proto_rawDescGZIP(), []int{13}
}

func (x *JStyleDeviceSleepParseResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *JStyleDeviceSleepParseResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *JStyleDeviceSleepParseResp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *JStyleDeviceSleepParseResp) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *JStyleDeviceSleepParseResp) GetData() *JStyleDeviceSleepParseRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type JStyleDeviceSleepParseRespData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime  string                             `protobuf:"bytes,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime    string                             `protobuf:"bytes,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
	List       []*JStyleDeviceSleepModelSleepData `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
	DeepSleep  int32                              `protobuf:"varint,4,opt,name=deepSleep,proto3" json:"deepSleep,omitempty"`
	LightSleep int32                              `protobuf:"varint,5,opt,name=lightSleep,proto3" json:"lightSleep,omitempty"`
	RemSleep   int32                              `protobuf:"varint,6,opt,name=remSleep,proto3" json:"remSleep,omitempty"`
	Awake      int32                              `protobuf:"varint,7,opt,name=awake,proto3" json:"awake,omitempty"`
	AllSleep   int32                              `protobuf:"varint,8,opt,name=allSleep,proto3" json:"allSleep,omitempty"`
}

func (x *JStyleDeviceSleepParseRespData) Reset() {
	*x = JStyleDeviceSleepParseRespData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JStyleDeviceSleepParseRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JStyleDeviceSleepParseRespData) ProtoMessage() {}

func (x *JStyleDeviceSleepParseRespData) ProtoReflect() protoreflect.Message {
	mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JStyleDeviceSleepParseRespData.ProtoReflect.Descriptor instead.
func (*JStyleDeviceSleepParseRespData) Descriptor() ([]byte, []int) {
	return file_aiot_rpc_service_aiot_rpc_service_proto_rawDescGZIP(), []int{14}
}

func (x *JStyleDeviceSleepParseRespData) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *JStyleDeviceSleepParseRespData) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *JStyleDeviceSleepParseRespData) GetList() []*JStyleDeviceSleepModelSleepData {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *JStyleDeviceSleepParseRespData) GetDeepSleep() int32 {
	if x != nil {
		return x.DeepSleep
	}
	return 0
}

func (x *JStyleDeviceSleepParseRespData) GetLightSleep() int32 {
	if x != nil {
		return x.LightSleep
	}
	return 0
}

func (x *JStyleDeviceSleepParseRespData) GetRemSleep() int32 {
	if x != nil {
		return x.RemSleep
	}
	return 0
}

func (x *JStyleDeviceSleepParseRespData) GetAwake() int32 {
	if x != nil {
		return x.Awake
	}
	return 0
}

func (x *JStyleDeviceSleepParseRespData) GetAllSleep() int32 {
	if x != nil {
		return x.AllSleep
	}
	return 0
}

type JStyleDeviceSleepModelSleepData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime  string     `protobuf:"bytes,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime    string     `protobuf:"bytes,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Len        int32      `protobuf:"varint,3,opt,name=len,proto3" json:"len,omitempty"`
	RawData    []*ModelUV `protobuf:"bytes,4,rep,name=rawData,proto3" json:"rawData,omitempty"`
	DeepSleep  int32      `protobuf:"varint,5,opt,name=deepSleep,proto3" json:"deepSleep,omitempty"`
	LightSleep int32      `protobuf:"varint,6,opt,name=lightSleep,proto3" json:"lightSleep,omitempty"`
	RemSleep   int32      `protobuf:"varint,7,opt,name=remSleep,proto3" json:"remSleep,omitempty"`
	Awake      int32      `protobuf:"varint,8,opt,name=awake,proto3" json:"awake,omitempty"`
	AllSleep   int32      `protobuf:"varint,9,opt,name=allSleep,proto3" json:"allSleep,omitempty"`
}

func (x *JStyleDeviceSleepModelSleepData) Reset() {
	*x = JStyleDeviceSleepModelSleepData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JStyleDeviceSleepModelSleepData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JStyleDeviceSleepModelSleepData) ProtoMessage() {}

func (x *JStyleDeviceSleepModelSleepData) ProtoReflect() protoreflect.Message {
	mi := &file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JStyleDeviceSleepModelSleepData.ProtoReflect.Descriptor instead.
func (*JStyleDeviceSleepModelSleepData) Descriptor() ([]byte, []int) {
	return file_aiot_rpc_service_aiot_rpc_service_proto_rawDescGZIP(), []int{15}
}

func (x *JStyleDeviceSleepModelSleepData) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *JStyleDeviceSleepModelSleepData) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *JStyleDeviceSleepModelSleepData) GetLen() int32 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *JStyleDeviceSleepModelSleepData) GetRawData() []*ModelUV {
	if x != nil {
		return x.RawData
	}
	return nil
}

func (x *JStyleDeviceSleepModelSleepData) GetDeepSleep() int32 {
	if x != nil {
		return x.DeepSleep
	}
	return 0
}

func (x *JStyleDeviceSleepModelSleepData) GetLightSleep() int32 {
	if x != nil {
		return x.LightSleep
	}
	return 0
}

func (x *JStyleDeviceSleepModelSleepData) GetRemSleep() int32 {
	if x != nil {
		return x.RemSleep
	}
	return 0
}

func (x *JStyleDeviceSleepModelSleepData) GetAwake() int32 {
	if x != nil {
		return x.Awake
	}
	return 0
}

func (x *JStyleDeviceSleepModelSleepData) GetAllSleep() int32 {
	if x != nil {
		return x.AllSleep
	}
	return 0
}

var File_aiot_rpc_service_aiot_rpc_service_proto protoreflect.FileDescriptor

var file_aiot_rpc_service_aiot_rpc_service_proto_rawDesc = []byte{
	0x0a, 0x27, 0x61, 0x69, 0x6f, 0x74, 0x2d, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x61, 0x69, 0x6f, 0x74, 0x2d, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x61, 0x69, 0x6f, 0x74, 0x22,
	0x25, 0x0a, 0x07, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x56, 0x12, 0x0c, 0x0a, 0x01, 0x75, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x75, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x01, 0x76, 0x22, 0x37, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x65, 0x6d, 0x70, 0x55, 0x56, 0x12, 0x0c, 0x0a, 0x01, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x01, 0x75, 0x12, 0x0c, 0x0a, 0x01, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01,
	0x74, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x76, 0x22,
	0x68, 0x0a, 0x1c, 0x4a, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x4f, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb1, 0x01, 0x0a, 0x1d, 0x4a, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x4f,
	0x6e, 0x65, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x69, 0x6f, 0x74, 0x2e, 0x4a, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xba, 0x01,
	0x0a, 0x1e, 0x4a, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x6f, 0x74, 0x2e, 0x4a, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x52, 0x61, 0x74, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x1a, 0x4a,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6c, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x69, 0x6f, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x55, 0x56, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x52, 0x61, 0x74, 0x65, 0x22, 0x65, 0x0a, 0x19, 0x4a, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73,
	0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xae, 0x01, 0x0a, 0x1a, 0x4a, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x69, 0x6f, 0x74, 0x2e, 0x4a, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x64, 0x0a, 0x18, 0x4a, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xac, 0x01, 0x0a, 0x19, 0x4a, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x6f,
	0x74, 0x2e, 0x4a, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd6, 0x01, 0x0a, 0x1d, 0x4a, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x61, 0x69, 0x6f, 0x74, 0x2e, 0x4a, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6f,
	0x72, 0x69, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6f, 0x72,
	0x69, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xd8,
	0x01, 0x0a, 0x19, 0x4a, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x69, 0x6f, 0x74, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x55, 0x56, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6f, 0x72, 0x69, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6f, 0x72, 0x69, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x65, 0x0a, 0x19, 0x4a, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x73, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xae, 0x01, 0x0a, 0x1a, 0x4a, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x69, 0x6f, 0x74, 0x2e, 0x4a, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x9f, 0x02, 0x0a, 0x1e, 0x4a, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x6f,
	0x74, 0x2e, 0x4a, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6c,
	0x65, 0x65, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x65, 0x70, 0x53,
	0x6c, 0x65, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x65, 0x65, 0x70,
	0x53, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x6c,
	0x65, 0x65, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x53, 0x6c, 0x65, 0x65,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x53, 0x6c, 0x65, 0x65,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x77, 0x61, 0x6b, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x61, 0x77, 0x61, 0x6b, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x53, 0x6c,
	0x65, 0x65, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x53, 0x6c,
	0x65, 0x65, 0x70, 0x22, 0xa0, 0x02, 0x0a, 0x1f, 0x4a, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x6c,
	0x65, 0x65, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x65,
	0x6e, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x69, 0x6f, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x55,
	0x56, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65,
	0x65, 0x70, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64,
	0x65, 0x65, 0x70, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x53,
	0x6c, 0x65, 0x65, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x53,
	0x6c, 0x65, 0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x77, 0x61, 0x6b, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x77, 0x61, 0x6b, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c,
	0x6c, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6c,
	0x6c, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x32, 0x90, 0x03, 0x0a, 0x14, 0x41, 0x49, 0x6f, 0x74, 0x4a,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x64, 0x0a, 0x19, 0x4a, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x4f, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x73, 0x65, 0x12, 0x22, 0x2e, 0x61,
	0x69, 0x6f, 0x74, 0x2e, 0x4a, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x4f, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x23, 0x2e, 0x61, 0x69, 0x6f, 0x74, 0x2e, 0x4a, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x4f, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5b, 0x0a, 0x16, 0x4a, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x73, 0x65, 0x12,
	0x1f, 0x2e, 0x61, 0x69, 0x6f, 0x74, 0x2e, 0x4a, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x20, 0x2e, 0x61, 0x69, 0x6f, 0x74, 0x2e, 0x4a, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x58, 0x0a, 0x15, 0x4a, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x61, 0x72, 0x73, 0x65, 0x12, 0x1e, 0x2e, 0x61, 0x69,
	0x6f, 0x74, 0x2e, 0x4a, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x61, 0x69,
	0x6f, 0x74, 0x2e, 0x4a, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5b, 0x0a, 0x16,
	0x4a, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6c, 0x65, 0x65,
	0x70, 0x50, 0x61, 0x72, 0x73, 0x65, 0x12, 0x1f, 0x2e, 0x61, 0x69, 0x6f, 0x74, 0x2e, 0x4a, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x61, 0x69, 0x6f, 0x74, 0x2e, 0x4a,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6c, 0x65, 0x65, 0x70,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2f, 0x61,
	0x69, 0x6f, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aiot_rpc_service_aiot_rpc_service_proto_rawDescOnce sync.Once
	file_aiot_rpc_service_aiot_rpc_service_proto_rawDescData = file_aiot_rpc_service_aiot_rpc_service_proto_rawDesc
)

func file_aiot_rpc_service_aiot_rpc_service_proto_rawDescGZIP() []byte {
	file_aiot_rpc_service_aiot_rpc_service_proto_rawDescOnce.Do(func() {
		file_aiot_rpc_service_aiot_rpc_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_aiot_rpc_service_aiot_rpc_service_proto_rawDescData)
	})
	return file_aiot_rpc_service_aiot_rpc_service_proto_rawDescData
}

var file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_aiot_rpc_service_aiot_rpc_service_proto_goTypes = []interface{}{
	(*ModelUV)(nil),                         // 0: aiot.ModelUV
	(*ModelTempUV)(nil),                     // 1: aiot.ModelTempUV
	(*JStyleDeviceHeartOneParseReq)(nil),    // 2: aiot.JStyleDeviceHeartOneParseReq
	(*JStyleDeviceHeartOneParseResp)(nil),   // 3: aiot.JStyleDeviceHeartOneParseResp
	(*JStyleDeviceHeartParseRespData)(nil),  // 4: aiot.JStyleDeviceHeartParseRespData
	(*JStyleDeviceHeartModelData)(nil),      // 5: aiot.JStyleDeviceHeartModelData
	(*JStyleDeviceHeartParseReq)(nil),       // 6: aiot.JStyleDeviceHeartParseReq
	(*JStyleDeviceHeartParseResp)(nil),      // 7: aiot.JStyleDeviceHeartParseResp
	(*JStyleDeviceStepParseReq)(nil),        // 8: aiot.JStyleDeviceStepParseReq
	(*JStyleDeviceStepParseResp)(nil),       // 9: aiot.JStyleDeviceStepParseResp
	(*JStyleDeviceStepParseRespData)(nil),   // 10: aiot.JStyleDeviceStepParseRespData
	(*JStyleDeviceStepModelData)(nil),       // 11: aiot.JStyleDeviceStepModelData
	(*JStyleDeviceSleepParseReq)(nil),       // 12: aiot.JStyleDeviceSleepParseReq
	(*JStyleDeviceSleepParseResp)(nil),      // 13: aiot.JStyleDeviceSleepParseResp
	(*JStyleDeviceSleepParseRespData)(nil),  // 14: aiot.JStyleDeviceSleepParseRespData
	(*JStyleDeviceSleepModelSleepData)(nil), // 15: aiot.JStyleDeviceSleepModelSleepData
}
var file_aiot_rpc_service_aiot_rpc_service_proto_depIdxs = []int32{
	4,  // 0: aiot.JStyleDeviceHeartOneParseResp.data:type_name -> aiot.JStyleDeviceHeartParseRespData
	5,  // 1: aiot.JStyleDeviceHeartParseRespData.List:type_name -> aiot.JStyleDeviceHeartModelData
	0,  // 2: aiot.JStyleDeviceHeartModelData.rawData:type_name -> aiot.ModelUV
	4,  // 3: aiot.JStyleDeviceHeartParseResp.data:type_name -> aiot.JStyleDeviceHeartParseRespData
	10, // 4: aiot.JStyleDeviceStepParseResp.data:type_name -> aiot.JStyleDeviceStepParseRespData
	11, // 5: aiot.JStyleDeviceStepParseRespData.list:type_name -> aiot.JStyleDeviceStepModelData
	0,  // 6: aiot.JStyleDeviceStepModelData.rawData:type_name -> aiot.ModelUV
	14, // 7: aiot.JStyleDeviceSleepParseResp.data:type_name -> aiot.JStyleDeviceSleepParseRespData
	15, // 8: aiot.JStyleDeviceSleepParseRespData.list:type_name -> aiot.JStyleDeviceSleepModelSleepData
	0,  // 9: aiot.JStyleDeviceSleepModelSleepData.rawData:type_name -> aiot.ModelUV
	2,  // 10: aiot.AIotJStyleRpcService.JStyleDeviceHeartOneParse:input_type -> aiot.JStyleDeviceHeartOneParseReq
	6,  // 11: aiot.AIotJStyleRpcService.JStyleDeviceHeartParse:input_type -> aiot.JStyleDeviceHeartParseReq
	8,  // 12: aiot.AIotJStyleRpcService.JStyleDeviceStepParse:input_type -> aiot.JStyleDeviceStepParseReq
	12, // 13: aiot.AIotJStyleRpcService.JStyleDeviceSleepParse:input_type -> aiot.JStyleDeviceSleepParseReq
	3,  // 14: aiot.AIotJStyleRpcService.JStyleDeviceHeartOneParse:output_type -> aiot.JStyleDeviceHeartOneParseResp
	7,  // 15: aiot.AIotJStyleRpcService.JStyleDeviceHeartParse:output_type -> aiot.JStyleDeviceHeartParseResp
	9,  // 16: aiot.AIotJStyleRpcService.JStyleDeviceStepParse:output_type -> aiot.JStyleDeviceStepParseResp
	13, // 17: aiot.AIotJStyleRpcService.JStyleDeviceSleepParse:output_type -> aiot.JStyleDeviceSleepParseResp
	14, // [14:18] is the sub-list for method output_type
	10, // [10:14] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_aiot_rpc_service_aiot_rpc_service_proto_init() }
func file_aiot_rpc_service_aiot_rpc_service_proto_init() {
	if File_aiot_rpc_service_aiot_rpc_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelUV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelTempUV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JStyleDeviceHeartOneParseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JStyleDeviceHeartOneParseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JStyleDeviceHeartParseRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JStyleDeviceHeartModelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JStyleDeviceHeartParseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JStyleDeviceHeartParseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JStyleDeviceStepParseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JStyleDeviceStepParseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JStyleDeviceStepParseRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JStyleDeviceStepModelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JStyleDeviceSleepParseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JStyleDeviceSleepParseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JStyleDeviceSleepParseRespData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JStyleDeviceSleepModelSleepData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aiot_rpc_service_aiot_rpc_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aiot_rpc_service_aiot_rpc_service_proto_goTypes,
		DependencyIndexes: file_aiot_rpc_service_aiot_rpc_service_proto_depIdxs,
		MessageInfos:      file_aiot_rpc_service_aiot_rpc_service_proto_msgTypes,
	}.Build()
	File_aiot_rpc_service_aiot_rpc_service_proto = out.File
	file_aiot_rpc_service_aiot_rpc_service_proto_rawDesc = nil
	file_aiot_rpc_service_aiot_rpc_service_proto_goTypes = nil
	file_aiot_rpc_service_aiot_rpc_service_proto_depIdxs = nil
}
