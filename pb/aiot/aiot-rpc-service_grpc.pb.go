// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: aiot-rpc-service/aiot-rpc-service.proto

package aiot

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AIotJStyleRpcService_JStyleDeviceHeartOneParse_FullMethodName = "/aiot.AIotJStyleRpcService/JStyleDeviceHeartOneParse"
	AIotJStyleRpcService_JStyleDeviceHeartParse_FullMethodName    = "/aiot.AIotJStyleRpcService/JStyleDeviceHeartParse"
	AIotJStyleRpcService_JStyleDeviceSleepParse_FullMethodName    = "/aiot.AIotJStyleRpcService/JStyleDeviceSleepParse"
)

// AIotJStyleRpcServiceClient is the client API for AIotJStyleRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AIotJStyleRpcServiceClient interface {
	// note: AIot设备管理模块
	JStyleDeviceHeartOneParse(ctx context.Context, in *JStyleDeviceHeartOneParseReq, opts ...grpc.CallOption) (*JStyleDeviceHeartOneParseResp, error)
	JStyleDeviceHeartParse(ctx context.Context, in *JStyleDeviceHeartParseReq, opts ...grpc.CallOption) (*JStyleDeviceHeartParseResp, error)
	JStyleDeviceSleepParse(ctx context.Context, in *JStyleDeviceSleepParseReq, opts ...grpc.CallOption) (*JStyleDeviceSleepParseResp, error)
}

type aIotJStyleRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAIotJStyleRpcServiceClient(cc grpc.ClientConnInterface) AIotJStyleRpcServiceClient {
	return &aIotJStyleRpcServiceClient{cc}
}

func (c *aIotJStyleRpcServiceClient) JStyleDeviceHeartOneParse(ctx context.Context, in *JStyleDeviceHeartOneParseReq, opts ...grpc.CallOption) (*JStyleDeviceHeartOneParseResp, error) {
	out := new(JStyleDeviceHeartOneParseResp)
	err := c.cc.Invoke(ctx, AIotJStyleRpcService_JStyleDeviceHeartOneParse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIotJStyleRpcServiceClient) JStyleDeviceHeartParse(ctx context.Context, in *JStyleDeviceHeartParseReq, opts ...grpc.CallOption) (*JStyleDeviceHeartParseResp, error) {
	out := new(JStyleDeviceHeartParseResp)
	err := c.cc.Invoke(ctx, AIotJStyleRpcService_JStyleDeviceHeartParse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIotJStyleRpcServiceClient) JStyleDeviceSleepParse(ctx context.Context, in *JStyleDeviceSleepParseReq, opts ...grpc.CallOption) (*JStyleDeviceSleepParseResp, error) {
	out := new(JStyleDeviceSleepParseResp)
	err := c.cc.Invoke(ctx, AIotJStyleRpcService_JStyleDeviceSleepParse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AIotJStyleRpcServiceServer is the server API for AIotJStyleRpcService service.
// All implementations must embed UnimplementedAIotJStyleRpcServiceServer
// for forward compatibility
type AIotJStyleRpcServiceServer interface {
	// note: AIot设备管理模块
	JStyleDeviceHeartOneParse(context.Context, *JStyleDeviceHeartOneParseReq) (*JStyleDeviceHeartOneParseResp, error)
	JStyleDeviceHeartParse(context.Context, *JStyleDeviceHeartParseReq) (*JStyleDeviceHeartParseResp, error)
	JStyleDeviceSleepParse(context.Context, *JStyleDeviceSleepParseReq) (*JStyleDeviceSleepParseResp, error)
	mustEmbedUnimplementedAIotJStyleRpcServiceServer()
}

// UnimplementedAIotJStyleRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAIotJStyleRpcServiceServer struct {
}

func (UnimplementedAIotJStyleRpcServiceServer) JStyleDeviceHeartOneParse(context.Context, *JStyleDeviceHeartOneParseReq) (*JStyleDeviceHeartOneParseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JStyleDeviceHeartOneParse not implemented")
}
func (UnimplementedAIotJStyleRpcServiceServer) JStyleDeviceHeartParse(context.Context, *JStyleDeviceHeartParseReq) (*JStyleDeviceHeartParseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JStyleDeviceHeartParse not implemented")
}
func (UnimplementedAIotJStyleRpcServiceServer) JStyleDeviceSleepParse(context.Context, *JStyleDeviceSleepParseReq) (*JStyleDeviceSleepParseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JStyleDeviceSleepParse not implemented")
}
func (UnimplementedAIotJStyleRpcServiceServer) mustEmbedUnimplementedAIotJStyleRpcServiceServer() {}

// UnsafeAIotJStyleRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIotJStyleRpcServiceServer will
// result in compilation errors.
type UnsafeAIotJStyleRpcServiceServer interface {
	mustEmbedUnimplementedAIotJStyleRpcServiceServer()
}

func RegisterAIotJStyleRpcServiceServer(s grpc.ServiceRegistrar, srv AIotJStyleRpcServiceServer) {
	s.RegisterService(&AIotJStyleRpcService_ServiceDesc, srv)
}

func _AIotJStyleRpcService_JStyleDeviceHeartOneParse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JStyleDeviceHeartOneParseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIotJStyleRpcServiceServer).JStyleDeviceHeartOneParse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIotJStyleRpcService_JStyleDeviceHeartOneParse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIotJStyleRpcServiceServer).JStyleDeviceHeartOneParse(ctx, req.(*JStyleDeviceHeartOneParseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIotJStyleRpcService_JStyleDeviceHeartParse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JStyleDeviceHeartParseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIotJStyleRpcServiceServer).JStyleDeviceHeartParse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIotJStyleRpcService_JStyleDeviceHeartParse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIotJStyleRpcServiceServer).JStyleDeviceHeartParse(ctx, req.(*JStyleDeviceHeartParseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIotJStyleRpcService_JStyleDeviceSleepParse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JStyleDeviceSleepParseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIotJStyleRpcServiceServer).JStyleDeviceSleepParse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIotJStyleRpcService_JStyleDeviceSleepParse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIotJStyleRpcServiceServer).JStyleDeviceSleepParse(ctx, req.(*JStyleDeviceSleepParseReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AIotJStyleRpcService_ServiceDesc is the grpc.ServiceDesc for AIotJStyleRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIotJStyleRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aiot.AIotJStyleRpcService",
	HandlerType: (*AIotJStyleRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JStyleDeviceHeartOneParse",
			Handler:    _AIotJStyleRpcService_JStyleDeviceHeartOneParse_Handler,
		},
		{
			MethodName: "JStyleDeviceHeartParse",
			Handler:    _AIotJStyleRpcService_JStyleDeviceHeartParse_Handler,
		},
		{
			MethodName: "JStyleDeviceSleepParse",
			Handler:    _AIotJStyleRpcService_JStyleDeviceSleepParse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aiot-rpc-service/aiot-rpc-service.proto",
}
