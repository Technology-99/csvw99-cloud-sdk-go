// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: article.proto

package article

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ArticleRpcService_Create_FullMethodName                = "/article.ArticleRpcService/Create"
	ArticleRpcService_Update_FullMethodName                = "/article.ArticleRpcService/Update"
	ArticleRpcService_Delete_FullMethodName                = "/article.ArticleRpcService/Delete"
	ArticleRpcService_DeleteIds_FullMethodName             = "/article.ArticleRpcService/DeleteIds"
	ArticleRpcService_Query_FullMethodName                 = "/article.ArticleRpcService/Query"
	ArticleRpcService_QueryListQueryIds_FullMethodName     = "/article.ArticleRpcService/QueryListQueryIds"
	ArticleRpcService_QueryList_FullMethodName             = "/article.ArticleRpcService/QueryList"
	ArticleRpcService_QueryRecommendList_FullMethodName    = "/article.ArticleRpcService/QueryRecommendList"
	ArticleRpcService_UpdateStatus_FullMethodName          = "/article.ArticleRpcService/UpdateStatus"
	ArticleRpcService_BindArticleLabels_FullMethodName     = "/article.ArticleRpcService/BindArticleLabels"
	ArticleRpcService_UnBindArticleLabels_FullMethodName   = "/article.ArticleRpcService/UnBindArticleLabels"
	ArticleRpcService_RelatedSitesCreate_FullMethodName    = "/article.ArticleRpcService/RelatedSitesCreate"
	ArticleRpcService_RelatedSitesUpdate_FullMethodName    = "/article.ArticleRpcService/RelatedSitesUpdate"
	ArticleRpcService_RelatedSitesDelete_FullMethodName    = "/article.ArticleRpcService/RelatedSitesDelete"
	ArticleRpcService_RelatedSitesDeleteIds_FullMethodName = "/article.ArticleRpcService/RelatedSitesDeleteIds"
	ArticleRpcService_RelatedSitesQuery_FullMethodName     = "/article.ArticleRpcService/RelatedSitesQuery"
	ArticleRpcService_RelatedSitesQueryIds_FullMethodName  = "/article.ArticleRpcService/RelatedSitesQueryIds"
	ArticleRpcService_RelatedSitesQueryList_FullMethodName = "/article.ArticleRpcService/RelatedSitesQueryList"
	ArticleRpcService_AttachmentCreate_FullMethodName      = "/article.ArticleRpcService/AttachmentCreate"
	ArticleRpcService_AttachmentUpdate_FullMethodName      = "/article.ArticleRpcService/AttachmentUpdate"
	ArticleRpcService_AttachmentDelete_FullMethodName      = "/article.ArticleRpcService/AttachmentDelete"
	ArticleRpcService_AttachmentDeleteIds_FullMethodName   = "/article.ArticleRpcService/AttachmentDeleteIds"
	ArticleRpcService_AttachmentQuery_FullMethodName       = "/article.ArticleRpcService/AttachmentQuery"
	ArticleRpcService_AttachmentQueryList_FullMethodName   = "/article.ArticleRpcService/AttachmentQueryList"
	ArticleRpcService_AttaFileCreate_FullMethodName        = "/article.ArticleRpcService/AttaFileCreate"
	ArticleRpcService_AttaFileDelete_FullMethodName        = "/article.ArticleRpcService/AttaFileDelete"
	ArticleRpcService_AttaFileDeleteIds_FullMethodName     = "/article.ArticleRpcService/AttaFileDeleteIds"
	ArticleRpcService_AttaFileQuery_FullMethodName         = "/article.ArticleRpcService/AttaFileQuery"
	ArticleRpcService_AttaFileQueryList_FullMethodName     = "/article.ArticleRpcService/AttaFileQueryList"
)

// ArticleRpcServiceClient is the client API for ArticleRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleRpcServiceClient interface {
	Create(ctx context.Context, in *CreateArticleReq, opts ...grpc.CallOption) (*CreateArticleResp, error)
	Update(ctx context.Context, in *UpdateArticleReq, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Response, error)
	DeleteIds(ctx context.Context, in *DeleteIdsReq, opts ...grpc.CallOption) (*Response, error)
	Query(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryArticleResp, error)
	QueryListQueryIds(ctx context.Context, in *QueryIdsReq, opts ...grpc.CallOption) (*QueryArticleListResp, error)
	QueryList(ctx context.Context, in *QueryArticleListReq, opts ...grpc.CallOption) (*QueryArticleListResp, error)
	QueryRecommendList(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryRecommendListResp, error)
	UpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*Response, error)
	BindArticleLabels(ctx context.Context, in *UpdateBindLabelsReq, opts ...grpc.CallOption) (*Response, error)
	UnBindArticleLabels(ctx context.Context, in *UpdateBindLabelsReq, opts ...grpc.CallOption) (*Response, error)
	// note: 相关站点
	RelatedSitesCreate(ctx context.Context, in *CreateRelatedSitesReq, opts ...grpc.CallOption) (*CreateResponse, error)
	RelatedSitesUpdate(ctx context.Context, in *UpdateRelatedSitesReq, opts ...grpc.CallOption) (*Response, error)
	RelatedSitesDelete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Response, error)
	RelatedSitesDeleteIds(ctx context.Context, in *DeleteIdsReq, opts ...grpc.CallOption) (*Response, error)
	RelatedSitesQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryRelatedSitesResp, error)
	RelatedSitesQueryIds(ctx context.Context, in *QueryIdsReq, opts ...grpc.CallOption) (*QueryRelatedSitesListResp, error)
	RelatedSitesQueryList(ctx context.Context, in *QueryRelatedSitesListReq, opts ...grpc.CallOption) (*QueryRelatedSitesListResp, error)
	// note: 附件模块
	AttachmentCreate(ctx context.Context, in *CreateAttachmentReq, opts ...grpc.CallOption) (*CreateResponse, error)
	AttachmentUpdate(ctx context.Context, in *UpdateAttachmentReq, opts ...grpc.CallOption) (*Response, error)
	AttachmentDelete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Response, error)
	AttachmentDeleteIds(ctx context.Context, in *DeleteIdsReq, opts ...grpc.CallOption) (*Response, error)
	AttachmentQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryAttachmentResp, error)
	AttachmentQueryList(ctx context.Context, in *QueryAttachmentListReq, opts ...grpc.CallOption) (*QueryAttachmentListResp, error)
	AttaFileCreate(ctx context.Context, in *CreateAttaFileReq, opts ...grpc.CallOption) (*CreateResponse, error)
	AttaFileDelete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Response, error)
	AttaFileDeleteIds(ctx context.Context, in *DeleteIdsReq, opts ...grpc.CallOption) (*Response, error)
	AttaFileQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryAttaFileResp, error)
	AttaFileQueryList(ctx context.Context, in *QueryAttaFileListReq, opts ...grpc.CallOption) (*QueryAttaFileListResp, error)
}

type articleRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleRpcServiceClient(cc grpc.ClientConnInterface) ArticleRpcServiceClient {
	return &articleRpcServiceClient{cc}
}

func (c *articleRpcServiceClient) Create(ctx context.Context, in *CreateArticleReq, opts ...grpc.CallOption) (*CreateArticleResp, error) {
	out := new(CreateArticleResp)
	err := c.cc.Invoke(ctx, ArticleRpcService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) Update(ctx context.Context, in *UpdateArticleReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ArticleRpcService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ArticleRpcService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) DeleteIds(ctx context.Context, in *DeleteIdsReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ArticleRpcService_DeleteIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) Query(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryArticleResp, error) {
	out := new(QueryArticleResp)
	err := c.cc.Invoke(ctx, ArticleRpcService_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) QueryListQueryIds(ctx context.Context, in *QueryIdsReq, opts ...grpc.CallOption) (*QueryArticleListResp, error) {
	out := new(QueryArticleListResp)
	err := c.cc.Invoke(ctx, ArticleRpcService_QueryListQueryIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) QueryList(ctx context.Context, in *QueryArticleListReq, opts ...grpc.CallOption) (*QueryArticleListResp, error) {
	out := new(QueryArticleListResp)
	err := c.cc.Invoke(ctx, ArticleRpcService_QueryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) QueryRecommendList(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryRecommendListResp, error) {
	out := new(QueryRecommendListResp)
	err := c.cc.Invoke(ctx, ArticleRpcService_QueryRecommendList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) UpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ArticleRpcService_UpdateStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) BindArticleLabels(ctx context.Context, in *UpdateBindLabelsReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ArticleRpcService_BindArticleLabels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) UnBindArticleLabels(ctx context.Context, in *UpdateBindLabelsReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ArticleRpcService_UnBindArticleLabels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) RelatedSitesCreate(ctx context.Context, in *CreateRelatedSitesReq, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, ArticleRpcService_RelatedSitesCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) RelatedSitesUpdate(ctx context.Context, in *UpdateRelatedSitesReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ArticleRpcService_RelatedSitesUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) RelatedSitesDelete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ArticleRpcService_RelatedSitesDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) RelatedSitesDeleteIds(ctx context.Context, in *DeleteIdsReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ArticleRpcService_RelatedSitesDeleteIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) RelatedSitesQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryRelatedSitesResp, error) {
	out := new(QueryRelatedSitesResp)
	err := c.cc.Invoke(ctx, ArticleRpcService_RelatedSitesQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) RelatedSitesQueryIds(ctx context.Context, in *QueryIdsReq, opts ...grpc.CallOption) (*QueryRelatedSitesListResp, error) {
	out := new(QueryRelatedSitesListResp)
	err := c.cc.Invoke(ctx, ArticleRpcService_RelatedSitesQueryIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) RelatedSitesQueryList(ctx context.Context, in *QueryRelatedSitesListReq, opts ...grpc.CallOption) (*QueryRelatedSitesListResp, error) {
	out := new(QueryRelatedSitesListResp)
	err := c.cc.Invoke(ctx, ArticleRpcService_RelatedSitesQueryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) AttachmentCreate(ctx context.Context, in *CreateAttachmentReq, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, ArticleRpcService_AttachmentCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) AttachmentUpdate(ctx context.Context, in *UpdateAttachmentReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ArticleRpcService_AttachmentUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) AttachmentDelete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ArticleRpcService_AttachmentDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) AttachmentDeleteIds(ctx context.Context, in *DeleteIdsReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ArticleRpcService_AttachmentDeleteIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) AttachmentQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryAttachmentResp, error) {
	out := new(QueryAttachmentResp)
	err := c.cc.Invoke(ctx, ArticleRpcService_AttachmentQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) AttachmentQueryList(ctx context.Context, in *QueryAttachmentListReq, opts ...grpc.CallOption) (*QueryAttachmentListResp, error) {
	out := new(QueryAttachmentListResp)
	err := c.cc.Invoke(ctx, ArticleRpcService_AttachmentQueryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) AttaFileCreate(ctx context.Context, in *CreateAttaFileReq, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, ArticleRpcService_AttaFileCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) AttaFileDelete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ArticleRpcService_AttaFileDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) AttaFileDeleteIds(ctx context.Context, in *DeleteIdsReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ArticleRpcService_AttaFileDeleteIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) AttaFileQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryAttaFileResp, error) {
	out := new(QueryAttaFileResp)
	err := c.cc.Invoke(ctx, ArticleRpcService_AttaFileQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleRpcServiceClient) AttaFileQueryList(ctx context.Context, in *QueryAttaFileListReq, opts ...grpc.CallOption) (*QueryAttaFileListResp, error) {
	out := new(QueryAttaFileListResp)
	err := c.cc.Invoke(ctx, ArticleRpcService_AttaFileQueryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleRpcServiceServer is the server API for ArticleRpcService service.
// All implementations must embed UnimplementedArticleRpcServiceServer
// for forward compatibility
type ArticleRpcServiceServer interface {
	Create(context.Context, *CreateArticleReq) (*CreateArticleResp, error)
	Update(context.Context, *UpdateArticleReq) (*Response, error)
	Delete(context.Context, *DeleteReq) (*Response, error)
	DeleteIds(context.Context, *DeleteIdsReq) (*Response, error)
	Query(context.Context, *QueryReq) (*QueryArticleResp, error)
	QueryListQueryIds(context.Context, *QueryIdsReq) (*QueryArticleListResp, error)
	QueryList(context.Context, *QueryArticleListReq) (*QueryArticleListResp, error)
	QueryRecommendList(context.Context, *QueryReq) (*QueryRecommendListResp, error)
	UpdateStatus(context.Context, *UpdateStatusReq) (*Response, error)
	BindArticleLabels(context.Context, *UpdateBindLabelsReq) (*Response, error)
	UnBindArticleLabels(context.Context, *UpdateBindLabelsReq) (*Response, error)
	// note: 相关站点
	RelatedSitesCreate(context.Context, *CreateRelatedSitesReq) (*CreateResponse, error)
	RelatedSitesUpdate(context.Context, *UpdateRelatedSitesReq) (*Response, error)
	RelatedSitesDelete(context.Context, *DeleteReq) (*Response, error)
	RelatedSitesDeleteIds(context.Context, *DeleteIdsReq) (*Response, error)
	RelatedSitesQuery(context.Context, *QueryReq) (*QueryRelatedSitesResp, error)
	RelatedSitesQueryIds(context.Context, *QueryIdsReq) (*QueryRelatedSitesListResp, error)
	RelatedSitesQueryList(context.Context, *QueryRelatedSitesListReq) (*QueryRelatedSitesListResp, error)
	// note: 附件模块
	AttachmentCreate(context.Context, *CreateAttachmentReq) (*CreateResponse, error)
	AttachmentUpdate(context.Context, *UpdateAttachmentReq) (*Response, error)
	AttachmentDelete(context.Context, *DeleteReq) (*Response, error)
	AttachmentDeleteIds(context.Context, *DeleteIdsReq) (*Response, error)
	AttachmentQuery(context.Context, *QueryReq) (*QueryAttachmentResp, error)
	AttachmentQueryList(context.Context, *QueryAttachmentListReq) (*QueryAttachmentListResp, error)
	AttaFileCreate(context.Context, *CreateAttaFileReq) (*CreateResponse, error)
	AttaFileDelete(context.Context, *DeleteReq) (*Response, error)
	AttaFileDeleteIds(context.Context, *DeleteIdsReq) (*Response, error)
	AttaFileQuery(context.Context, *QueryReq) (*QueryAttaFileResp, error)
	AttaFileQueryList(context.Context, *QueryAttaFileListReq) (*QueryAttaFileListResp, error)
	mustEmbedUnimplementedArticleRpcServiceServer()
}

// UnimplementedArticleRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArticleRpcServiceServer struct {
}

func (UnimplementedArticleRpcServiceServer) Create(context.Context, *CreateArticleReq) (*CreateArticleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedArticleRpcServiceServer) Update(context.Context, *UpdateArticleReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedArticleRpcServiceServer) Delete(context.Context, *DeleteReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedArticleRpcServiceServer) DeleteIds(context.Context, *DeleteIdsReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIds not implemented")
}
func (UnimplementedArticleRpcServiceServer) Query(context.Context, *QueryReq) (*QueryArticleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedArticleRpcServiceServer) QueryListQueryIds(context.Context, *QueryIdsReq) (*QueryArticleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryListQueryIds not implemented")
}
func (UnimplementedArticleRpcServiceServer) QueryList(context.Context, *QueryArticleListReq) (*QueryArticleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryList not implemented")
}
func (UnimplementedArticleRpcServiceServer) QueryRecommendList(context.Context, *QueryReq) (*QueryRecommendListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRecommendList not implemented")
}
func (UnimplementedArticleRpcServiceServer) UpdateStatus(context.Context, *UpdateStatusReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedArticleRpcServiceServer) BindArticleLabels(context.Context, *UpdateBindLabelsReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindArticleLabels not implemented")
}
func (UnimplementedArticleRpcServiceServer) UnBindArticleLabels(context.Context, *UpdateBindLabelsReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBindArticleLabels not implemented")
}
func (UnimplementedArticleRpcServiceServer) RelatedSitesCreate(context.Context, *CreateRelatedSitesReq) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelatedSitesCreate not implemented")
}
func (UnimplementedArticleRpcServiceServer) RelatedSitesUpdate(context.Context, *UpdateRelatedSitesReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelatedSitesUpdate not implemented")
}
func (UnimplementedArticleRpcServiceServer) RelatedSitesDelete(context.Context, *DeleteReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelatedSitesDelete not implemented")
}
func (UnimplementedArticleRpcServiceServer) RelatedSitesDeleteIds(context.Context, *DeleteIdsReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelatedSitesDeleteIds not implemented")
}
func (UnimplementedArticleRpcServiceServer) RelatedSitesQuery(context.Context, *QueryReq) (*QueryRelatedSitesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelatedSitesQuery not implemented")
}
func (UnimplementedArticleRpcServiceServer) RelatedSitesQueryIds(context.Context, *QueryIdsReq) (*QueryRelatedSitesListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelatedSitesQueryIds not implemented")
}
func (UnimplementedArticleRpcServiceServer) RelatedSitesQueryList(context.Context, *QueryRelatedSitesListReq) (*QueryRelatedSitesListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelatedSitesQueryList not implemented")
}
func (UnimplementedArticleRpcServiceServer) AttachmentCreate(context.Context, *CreateAttachmentReq) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachmentCreate not implemented")
}
func (UnimplementedArticleRpcServiceServer) AttachmentUpdate(context.Context, *UpdateAttachmentReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachmentUpdate not implemented")
}
func (UnimplementedArticleRpcServiceServer) AttachmentDelete(context.Context, *DeleteReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachmentDelete not implemented")
}
func (UnimplementedArticleRpcServiceServer) AttachmentDeleteIds(context.Context, *DeleteIdsReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachmentDeleteIds not implemented")
}
func (UnimplementedArticleRpcServiceServer) AttachmentQuery(context.Context, *QueryReq) (*QueryAttachmentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachmentQuery not implemented")
}
func (UnimplementedArticleRpcServiceServer) AttachmentQueryList(context.Context, *QueryAttachmentListReq) (*QueryAttachmentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachmentQueryList not implemented")
}
func (UnimplementedArticleRpcServiceServer) AttaFileCreate(context.Context, *CreateAttaFileReq) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttaFileCreate not implemented")
}
func (UnimplementedArticleRpcServiceServer) AttaFileDelete(context.Context, *DeleteReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttaFileDelete not implemented")
}
func (UnimplementedArticleRpcServiceServer) AttaFileDeleteIds(context.Context, *DeleteIdsReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttaFileDeleteIds not implemented")
}
func (UnimplementedArticleRpcServiceServer) AttaFileQuery(context.Context, *QueryReq) (*QueryAttaFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttaFileQuery not implemented")
}
func (UnimplementedArticleRpcServiceServer) AttaFileQueryList(context.Context, *QueryAttaFileListReq) (*QueryAttaFileListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttaFileQueryList not implemented")
}
func (UnimplementedArticleRpcServiceServer) mustEmbedUnimplementedArticleRpcServiceServer() {}

// UnsafeArticleRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleRpcServiceServer will
// result in compilation errors.
type UnsafeArticleRpcServiceServer interface {
	mustEmbedUnimplementedArticleRpcServiceServer()
}

func RegisterArticleRpcServiceServer(s grpc.ServiceRegistrar, srv ArticleRpcServiceServer) {
	s.RegisterService(&ArticleRpcService_ServiceDesc, srv)
}

func _ArticleRpcService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).Create(ctx, req.(*CreateArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).Update(ctx, req.(*UpdateArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_DeleteIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).DeleteIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_DeleteIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).DeleteIds(ctx, req.(*DeleteIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).Query(ctx, req.(*QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_QueryListQueryIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).QueryListQueryIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_QueryListQueryIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).QueryListQueryIds(ctx, req.(*QueryIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_QueryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryArticleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).QueryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_QueryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).QueryList(ctx, req.(*QueryArticleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_QueryRecommendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).QueryRecommendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_QueryRecommendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).QueryRecommendList(ctx, req.(*QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).UpdateStatus(ctx, req.(*UpdateStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_BindArticleLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBindLabelsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).BindArticleLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_BindArticleLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).BindArticleLabels(ctx, req.(*UpdateBindLabelsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_UnBindArticleLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBindLabelsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).UnBindArticleLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_UnBindArticleLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).UnBindArticleLabels(ctx, req.(*UpdateBindLabelsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_RelatedSitesCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRelatedSitesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).RelatedSitesCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_RelatedSitesCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).RelatedSitesCreate(ctx, req.(*CreateRelatedSitesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_RelatedSitesUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRelatedSitesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).RelatedSitesUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_RelatedSitesUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).RelatedSitesUpdate(ctx, req.(*UpdateRelatedSitesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_RelatedSitesDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).RelatedSitesDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_RelatedSitesDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).RelatedSitesDelete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_RelatedSitesDeleteIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).RelatedSitesDeleteIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_RelatedSitesDeleteIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).RelatedSitesDeleteIds(ctx, req.(*DeleteIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_RelatedSitesQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).RelatedSitesQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_RelatedSitesQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).RelatedSitesQuery(ctx, req.(*QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_RelatedSitesQueryIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).RelatedSitesQueryIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_RelatedSitesQueryIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).RelatedSitesQueryIds(ctx, req.(*QueryIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_RelatedSitesQueryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRelatedSitesListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).RelatedSitesQueryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_RelatedSitesQueryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).RelatedSitesQueryList(ctx, req.(*QueryRelatedSitesListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_AttachmentCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttachmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).AttachmentCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_AttachmentCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).AttachmentCreate(ctx, req.(*CreateAttachmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_AttachmentUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttachmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).AttachmentUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_AttachmentUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).AttachmentUpdate(ctx, req.(*UpdateAttachmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_AttachmentDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).AttachmentDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_AttachmentDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).AttachmentDelete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_AttachmentDeleteIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).AttachmentDeleteIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_AttachmentDeleteIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).AttachmentDeleteIds(ctx, req.(*DeleteIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_AttachmentQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).AttachmentQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_AttachmentQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).AttachmentQuery(ctx, req.(*QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_AttachmentQueryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAttachmentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).AttachmentQueryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_AttachmentQueryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).AttachmentQueryList(ctx, req.(*QueryAttachmentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_AttaFileCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttaFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).AttaFileCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_AttaFileCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).AttaFileCreate(ctx, req.(*CreateAttaFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_AttaFileDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).AttaFileDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_AttaFileDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).AttaFileDelete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_AttaFileDeleteIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).AttaFileDeleteIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_AttaFileDeleteIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).AttaFileDeleteIds(ctx, req.(*DeleteIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_AttaFileQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).AttaFileQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_AttaFileQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).AttaFileQuery(ctx, req.(*QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleRpcService_AttaFileQueryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAttaFileListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleRpcServiceServer).AttaFileQueryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticleRpcService_AttaFileQueryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleRpcServiceServer).AttaFileQueryList(ctx, req.(*QueryAttaFileListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticleRpcService_ServiceDesc is the grpc.ServiceDesc for ArticleRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticleRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "article.ArticleRpcService",
	HandlerType: (*ArticleRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ArticleRpcService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ArticleRpcService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ArticleRpcService_Delete_Handler,
		},
		{
			MethodName: "DeleteIds",
			Handler:    _ArticleRpcService_DeleteIds_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _ArticleRpcService_Query_Handler,
		},
		{
			MethodName: "QueryListQueryIds",
			Handler:    _ArticleRpcService_QueryListQueryIds_Handler,
		},
		{
			MethodName: "QueryList",
			Handler:    _ArticleRpcService_QueryList_Handler,
		},
		{
			MethodName: "QueryRecommendList",
			Handler:    _ArticleRpcService_QueryRecommendList_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _ArticleRpcService_UpdateStatus_Handler,
		},
		{
			MethodName: "BindArticleLabels",
			Handler:    _ArticleRpcService_BindArticleLabels_Handler,
		},
		{
			MethodName: "UnBindArticleLabels",
			Handler:    _ArticleRpcService_UnBindArticleLabels_Handler,
		},
		{
			MethodName: "RelatedSitesCreate",
			Handler:    _ArticleRpcService_RelatedSitesCreate_Handler,
		},
		{
			MethodName: "RelatedSitesUpdate",
			Handler:    _ArticleRpcService_RelatedSitesUpdate_Handler,
		},
		{
			MethodName: "RelatedSitesDelete",
			Handler:    _ArticleRpcService_RelatedSitesDelete_Handler,
		},
		{
			MethodName: "RelatedSitesDeleteIds",
			Handler:    _ArticleRpcService_RelatedSitesDeleteIds_Handler,
		},
		{
			MethodName: "RelatedSitesQuery",
			Handler:    _ArticleRpcService_RelatedSitesQuery_Handler,
		},
		{
			MethodName: "RelatedSitesQueryIds",
			Handler:    _ArticleRpcService_RelatedSitesQueryIds_Handler,
		},
		{
			MethodName: "RelatedSitesQueryList",
			Handler:    _ArticleRpcService_RelatedSitesQueryList_Handler,
		},
		{
			MethodName: "AttachmentCreate",
			Handler:    _ArticleRpcService_AttachmentCreate_Handler,
		},
		{
			MethodName: "AttachmentUpdate",
			Handler:    _ArticleRpcService_AttachmentUpdate_Handler,
		},
		{
			MethodName: "AttachmentDelete",
			Handler:    _ArticleRpcService_AttachmentDelete_Handler,
		},
		{
			MethodName: "AttachmentDeleteIds",
			Handler:    _ArticleRpcService_AttachmentDeleteIds_Handler,
		},
		{
			MethodName: "AttachmentQuery",
			Handler:    _ArticleRpcService_AttachmentQuery_Handler,
		},
		{
			MethodName: "AttachmentQueryList",
			Handler:    _ArticleRpcService_AttachmentQueryList_Handler,
		},
		{
			MethodName: "AttaFileCreate",
			Handler:    _ArticleRpcService_AttaFileCreate_Handler,
		},
		{
			MethodName: "AttaFileDelete",
			Handler:    _ArticleRpcService_AttaFileDelete_Handler,
		},
		{
			MethodName: "AttaFileDeleteIds",
			Handler:    _ArticleRpcService_AttaFileDeleteIds_Handler,
		},
		{
			MethodName: "AttaFileQuery",
			Handler:    _ArticleRpcService_AttaFileQuery_Handler,
		},
		{
			MethodName: "AttaFileQueryList",
			Handler:    _ArticleRpcService_AttaFileQueryList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "article.proto",
}
