// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: transactions-rpc-service/transactions-rpc-service.proto

package transactions

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductRpcService_ProductCreate_FullMethodName    = "/transactions.ProductRpcService/ProductCreate"
	ProductRpcService_ProductDelete_FullMethodName    = "/transactions.ProductRpcService/ProductDelete"
	ProductRpcService_ProductDeleteIds_FullMethodName = "/transactions.ProductRpcService/ProductDeleteIds"
	ProductRpcService_ProductUpdate_FullMethodName    = "/transactions.ProductRpcService/ProductUpdate"
	ProductRpcService_ProductQuery_FullMethodName     = "/transactions.ProductRpcService/ProductQuery"
	ProductRpcService_ProductQueryIds_FullMethodName  = "/transactions.ProductRpcService/ProductQueryIds"
	ProductRpcService_ProductQueryList_FullMethodName = "/transactions.ProductRpcService/ProductQueryList"
)

// ProductRpcServiceClient is the client API for ProductRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductRpcServiceClient interface {
	// note: 产品管理
	ProductCreate(ctx context.Context, in *ProductCreateReq, opts ...grpc.CallOption) (*ProductCreateResp, error)
	ProductDelete(ctx context.Context, in *ProductDeleteReq, opts ...grpc.CallOption) (*ProductDeleteResp, error)
	ProductDeleteIds(ctx context.Context, in *ProductDeleteIdsReq, opts ...grpc.CallOption) (*ProductDeleteIdsResp, error)
	ProductUpdate(ctx context.Context, in *ProductUpdateReq, opts ...grpc.CallOption) (*ProductUpdateResp, error)
	ProductQuery(ctx context.Context, in *ProductQueryReq, opts ...grpc.CallOption) (*ProductQueryResp, error)
	ProductQueryIds(ctx context.Context, in *ProductQueryIdsReq, opts ...grpc.CallOption) (*ProductQueryIdsResp, error)
	ProductQueryList(ctx context.Context, in *ProductQueryListReq, opts ...grpc.CallOption) (*ProductQueryListResp, error)
}

type productRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductRpcServiceClient(cc grpc.ClientConnInterface) ProductRpcServiceClient {
	return &productRpcServiceClient{cc}
}

func (c *productRpcServiceClient) ProductCreate(ctx context.Context, in *ProductCreateReq, opts ...grpc.CallOption) (*ProductCreateResp, error) {
	out := new(ProductCreateResp)
	err := c.cc.Invoke(ctx, ProductRpcService_ProductCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcServiceClient) ProductDelete(ctx context.Context, in *ProductDeleteReq, opts ...grpc.CallOption) (*ProductDeleteResp, error) {
	out := new(ProductDeleteResp)
	err := c.cc.Invoke(ctx, ProductRpcService_ProductDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcServiceClient) ProductDeleteIds(ctx context.Context, in *ProductDeleteIdsReq, opts ...grpc.CallOption) (*ProductDeleteIdsResp, error) {
	out := new(ProductDeleteIdsResp)
	err := c.cc.Invoke(ctx, ProductRpcService_ProductDeleteIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcServiceClient) ProductUpdate(ctx context.Context, in *ProductUpdateReq, opts ...grpc.CallOption) (*ProductUpdateResp, error) {
	out := new(ProductUpdateResp)
	err := c.cc.Invoke(ctx, ProductRpcService_ProductUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcServiceClient) ProductQuery(ctx context.Context, in *ProductQueryReq, opts ...grpc.CallOption) (*ProductQueryResp, error) {
	out := new(ProductQueryResp)
	err := c.cc.Invoke(ctx, ProductRpcService_ProductQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcServiceClient) ProductQueryIds(ctx context.Context, in *ProductQueryIdsReq, opts ...grpc.CallOption) (*ProductQueryIdsResp, error) {
	out := new(ProductQueryIdsResp)
	err := c.cc.Invoke(ctx, ProductRpcService_ProductQueryIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcServiceClient) ProductQueryList(ctx context.Context, in *ProductQueryListReq, opts ...grpc.CallOption) (*ProductQueryListResp, error) {
	out := new(ProductQueryListResp)
	err := c.cc.Invoke(ctx, ProductRpcService_ProductQueryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductRpcServiceServer is the server API for ProductRpcService service.
// All implementations must embed UnimplementedProductRpcServiceServer
// for forward compatibility
type ProductRpcServiceServer interface {
	// note: 产品管理
	ProductCreate(context.Context, *ProductCreateReq) (*ProductCreateResp, error)
	ProductDelete(context.Context, *ProductDeleteReq) (*ProductDeleteResp, error)
	ProductDeleteIds(context.Context, *ProductDeleteIdsReq) (*ProductDeleteIdsResp, error)
	ProductUpdate(context.Context, *ProductUpdateReq) (*ProductUpdateResp, error)
	ProductQuery(context.Context, *ProductQueryReq) (*ProductQueryResp, error)
	ProductQueryIds(context.Context, *ProductQueryIdsReq) (*ProductQueryIdsResp, error)
	ProductQueryList(context.Context, *ProductQueryListReq) (*ProductQueryListResp, error)
	mustEmbedUnimplementedProductRpcServiceServer()
}

// UnimplementedProductRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductRpcServiceServer struct {
}

func (UnimplementedProductRpcServiceServer) ProductCreate(context.Context, *ProductCreateReq) (*ProductCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCreate not implemented")
}
func (UnimplementedProductRpcServiceServer) ProductDelete(context.Context, *ProductDeleteReq) (*ProductDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductDelete not implemented")
}
func (UnimplementedProductRpcServiceServer) ProductDeleteIds(context.Context, *ProductDeleteIdsReq) (*ProductDeleteIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductDeleteIds not implemented")
}
func (UnimplementedProductRpcServiceServer) ProductUpdate(context.Context, *ProductUpdateReq) (*ProductUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductUpdate not implemented")
}
func (UnimplementedProductRpcServiceServer) ProductQuery(context.Context, *ProductQueryReq) (*ProductQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductQuery not implemented")
}
func (UnimplementedProductRpcServiceServer) ProductQueryIds(context.Context, *ProductQueryIdsReq) (*ProductQueryIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductQueryIds not implemented")
}
func (UnimplementedProductRpcServiceServer) ProductQueryList(context.Context, *ProductQueryListReq) (*ProductQueryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductQueryList not implemented")
}
func (UnimplementedProductRpcServiceServer) mustEmbedUnimplementedProductRpcServiceServer() {}

// UnsafeProductRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductRpcServiceServer will
// result in compilation errors.
type UnsafeProductRpcServiceServer interface {
	mustEmbedUnimplementedProductRpcServiceServer()
}

func RegisterProductRpcServiceServer(s grpc.ServiceRegistrar, srv ProductRpcServiceServer) {
	s.RegisterService(&ProductRpcService_ServiceDesc, srv)
}

func _ProductRpcService_ProductCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServiceServer).ProductCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductRpcService_ProductCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServiceServer).ProductCreate(ctx, req.(*ProductCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpcService_ProductDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServiceServer).ProductDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductRpcService_ProductDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServiceServer).ProductDelete(ctx, req.(*ProductDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpcService_ProductDeleteIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductDeleteIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServiceServer).ProductDeleteIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductRpcService_ProductDeleteIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServiceServer).ProductDeleteIds(ctx, req.(*ProductDeleteIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpcService_ProductUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServiceServer).ProductUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductRpcService_ProductUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServiceServer).ProductUpdate(ctx, req.(*ProductUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpcService_ProductQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServiceServer).ProductQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductRpcService_ProductQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServiceServer).ProductQuery(ctx, req.(*ProductQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpcService_ProductQueryIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductQueryIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServiceServer).ProductQueryIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductRpcService_ProductQueryIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServiceServer).ProductQueryIds(ctx, req.(*ProductQueryIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpcService_ProductQueryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductQueryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServiceServer).ProductQueryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductRpcService_ProductQueryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServiceServer).ProductQueryList(ctx, req.(*ProductQueryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductRpcService_ServiceDesc is the grpc.ServiceDesc for ProductRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transactions.ProductRpcService",
	HandlerType: (*ProductRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProductCreate",
			Handler:    _ProductRpcService_ProductCreate_Handler,
		},
		{
			MethodName: "ProductDelete",
			Handler:    _ProductRpcService_ProductDelete_Handler,
		},
		{
			MethodName: "ProductDeleteIds",
			Handler:    _ProductRpcService_ProductDeleteIds_Handler,
		},
		{
			MethodName: "ProductUpdate",
			Handler:    _ProductRpcService_ProductUpdate_Handler,
		},
		{
			MethodName: "ProductQuery",
			Handler:    _ProductRpcService_ProductQuery_Handler,
		},
		{
			MethodName: "ProductQueryIds",
			Handler:    _ProductRpcService_ProductQueryIds_Handler,
		},
		{
			MethodName: "ProductQueryList",
			Handler:    _ProductRpcService_ProductQueryList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transactions-rpc-service/transactions-rpc-service.proto",
}

const (
	TransactionsRpcService_CreateOrder_FullMethodName = "/transactions.TransactionsRpcService/CreateOrder"
	TransactionsRpcService_QueryOrder_FullMethodName  = "/transactions.TransactionsRpcService/QueryOrder"
	TransactionsRpcService_CloseOrder_FullMethodName  = "/transactions.TransactionsRpcService/CloseOrder"
)

// TransactionsRpcServiceClient is the client API for TransactionsRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionsRpcServiceClient interface {
	CreateOrder(ctx context.Context, in *CreateOrderParams, opts ...grpc.CallOption) (*CreateOrderResp, error)
	QueryOrder(ctx context.Context, in *QueryOrderParams, opts ...grpc.CallOption) (*QueryOrderResp, error)
	CloseOrder(ctx context.Context, in *CloseOrderParams, opts ...grpc.CallOption) (*CloseOrderResp, error)
}

type transactionsRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionsRpcServiceClient(cc grpc.ClientConnInterface) TransactionsRpcServiceClient {
	return &transactionsRpcServiceClient{cc}
}

func (c *transactionsRpcServiceClient) CreateOrder(ctx context.Context, in *CreateOrderParams, opts ...grpc.CallOption) (*CreateOrderResp, error) {
	out := new(CreateOrderResp)
	err := c.cc.Invoke(ctx, TransactionsRpcService_CreateOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsRpcServiceClient) QueryOrder(ctx context.Context, in *QueryOrderParams, opts ...grpc.CallOption) (*QueryOrderResp, error) {
	out := new(QueryOrderResp)
	err := c.cc.Invoke(ctx, TransactionsRpcService_QueryOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsRpcServiceClient) CloseOrder(ctx context.Context, in *CloseOrderParams, opts ...grpc.CallOption) (*CloseOrderResp, error) {
	out := new(CloseOrderResp)
	err := c.cc.Invoke(ctx, TransactionsRpcService_CloseOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionsRpcServiceServer is the server API for TransactionsRpcService service.
// All implementations must embed UnimplementedTransactionsRpcServiceServer
// for forward compatibility
type TransactionsRpcServiceServer interface {
	CreateOrder(context.Context, *CreateOrderParams) (*CreateOrderResp, error)
	QueryOrder(context.Context, *QueryOrderParams) (*QueryOrderResp, error)
	CloseOrder(context.Context, *CloseOrderParams) (*CloseOrderResp, error)
	mustEmbedUnimplementedTransactionsRpcServiceServer()
}

// UnimplementedTransactionsRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionsRpcServiceServer struct {
}

func (UnimplementedTransactionsRpcServiceServer) CreateOrder(context.Context, *CreateOrderParams) (*CreateOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedTransactionsRpcServiceServer) QueryOrder(context.Context, *QueryOrderParams) (*QueryOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrder not implemented")
}
func (UnimplementedTransactionsRpcServiceServer) CloseOrder(context.Context, *CloseOrderParams) (*CloseOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseOrder not implemented")
}
func (UnimplementedTransactionsRpcServiceServer) mustEmbedUnimplementedTransactionsRpcServiceServer() {
}

// UnsafeTransactionsRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionsRpcServiceServer will
// result in compilation errors.
type UnsafeTransactionsRpcServiceServer interface {
	mustEmbedUnimplementedTransactionsRpcServiceServer()
}

func RegisterTransactionsRpcServiceServer(s grpc.ServiceRegistrar, srv TransactionsRpcServiceServer) {
	s.RegisterService(&TransactionsRpcService_ServiceDesc, srv)
}

func _TransactionsRpcService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsRpcServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsRpcService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsRpcServiceServer).CreateOrder(ctx, req.(*CreateOrderParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsRpcService_QueryOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsRpcServiceServer).QueryOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsRpcService_QueryOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsRpcServiceServer).QueryOrder(ctx, req.(*QueryOrderParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsRpcService_CloseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseOrderParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsRpcServiceServer).CloseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsRpcService_CloseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsRpcServiceServer).CloseOrder(ctx, req.(*CloseOrderParams))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionsRpcService_ServiceDesc is the grpc.ServiceDesc for TransactionsRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionsRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transactions.TransactionsRpcService",
	HandlerType: (*TransactionsRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _TransactionsRpcService_CreateOrder_Handler,
		},
		{
			MethodName: "QueryOrder",
			Handler:    _TransactionsRpcService_QueryOrder_Handler,
		},
		{
			MethodName: "CloseOrder",
			Handler:    _TransactionsRpcService_CloseOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transactions-rpc-service/transactions-rpc-service.proto",
}
