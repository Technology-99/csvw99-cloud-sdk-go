// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: thirdparty.proto

package thirdparty

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ThirdPartyRpcService_WechatCode2Token_FullMethodName                 = "/thirdparty.ThirdPartyRpcService/WechatCode2Token"
	ThirdPartyRpcService_WechatRefreshUserToken_FullMethodName           = "/thirdparty.ThirdPartyRpcService/WechatRefreshUserToken"
	ThirdPartyRpcService_WechatUserToken2UserInfo_FullMethodName         = "/thirdparty.ThirdPartyRpcService/WechatUserToken2UserInfo"
	ThirdPartyRpcService_WechatMiniAppCode2Session_FullMethodName        = "/thirdparty.ThirdPartyRpcService/WechatMiniAppCode2Session"
	ThirdPartyRpcService_WechatMiniAppCode2Phone_FullMethodName          = "/thirdparty.ThirdPartyRpcService/WechatMiniAppCode2Phone"
	ThirdPartyRpcService_WechatWebRedirectWechat_FullMethodName          = "/thirdparty.ThirdPartyRpcService/WechatWebRedirectWechat"
	ThirdPartyRpcService_WechatWebAutoRedirectWechat_FullMethodName      = "/thirdparty.ThirdPartyRpcService/WechatWebAutoRedirectWechat"
	ThirdPartyRpcService_WechatOfficialAccountAccessToken_FullMethodName = "/thirdparty.ThirdPartyRpcService/WechatOfficialAccountAccessToken"
	ThirdPartyRpcService_WechatOfficialAccountJsApiTicket_FullMethodName = "/thirdparty.ThirdPartyRpcService/WechatOfficialAccountJsApiTicket"
	ThirdPartyRpcService_DYMiniGameCode2Token_FullMethodName             = "/thirdparty.ThirdPartyRpcService/DYMiniGameCode2Token"
	ThirdPartyRpcService_DYMiniGameOAAccessToken_FullMethodName          = "/thirdparty.ThirdPartyRpcService/DYMiniGameOAAccessToken"
)

// ThirdPartyRpcServiceClient is the client API for ThirdPartyRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThirdPartyRpcServiceClient interface {
	// note: 微信专区
	// note: 通用
	WechatCode2Token(ctx context.Context, in *WechatCodeReq, opts ...grpc.CallOption) (*WechatCodeResp, error)
	WechatRefreshUserToken(ctx context.Context, in *WechatRefreshReq, opts ...grpc.CallOption) (*WechatRefreshResp, error)
	WechatUserToken2UserInfo(ctx context.Context, in *WechatTokenReq, opts ...grpc.CallOption) (*WechatUserInfoResp, error)
	// note: 小程序
	WechatMiniAppCode2Session(ctx context.Context, in *WechatCodeReq, opts ...grpc.CallOption) (*WechatMiniAppCodeResp, error)
	WechatMiniAppCode2Phone(ctx context.Context, in *WechatCodeReq, opts ...grpc.CallOption) (*WechatMiniAppCode2PhoneResp, error)
	// note: web
	WechatWebRedirectWechat(ctx context.Context, in *WechatWebRedirectReq, opts ...grpc.CallOption) (*WechatWebRedirectResp, error)
	WechatWebAutoRedirectWechat(ctx context.Context, in *WechatWebAutoRedirectReq, opts ...grpc.CallOption) (*WechatWebAutoRedirectResp, error)
	// note: base OfficialAccount 公众号基础能力
	WechatOfficialAccountAccessToken(ctx context.Context, in *WechatOaKeyReq, opts ...grpc.CallOption) (*WechatOaAccessTokenResp, error)
	WechatOfficialAccountJsApiTicket(ctx context.Context, in *WechatOaKeyReq, opts ...grpc.CallOption) (*WechatOaJsApiTicketResp, error)
	// note: 抖音专区
	DYMiniGameCode2Token(ctx context.Context, in *DYMiniGameCode2TokenReq, opts ...grpc.CallOption) (*DYMiniGameCode2TokenResp, error)
	// note: base Game 小游戏基础能力
	DYMiniGameOAAccessToken(ctx context.Context, in *DYMiniGameOAAccessTokenReq, opts ...grpc.CallOption) (*DYMiniGameOAAccessTokenResp, error)
}

type thirdPartyRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewThirdPartyRpcServiceClient(cc grpc.ClientConnInterface) ThirdPartyRpcServiceClient {
	return &thirdPartyRpcServiceClient{cc}
}

func (c *thirdPartyRpcServiceClient) WechatCode2Token(ctx context.Context, in *WechatCodeReq, opts ...grpc.CallOption) (*WechatCodeResp, error) {
	out := new(WechatCodeResp)
	err := c.cc.Invoke(ctx, ThirdPartyRpcService_WechatCode2Token_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyRpcServiceClient) WechatRefreshUserToken(ctx context.Context, in *WechatRefreshReq, opts ...grpc.CallOption) (*WechatRefreshResp, error) {
	out := new(WechatRefreshResp)
	err := c.cc.Invoke(ctx, ThirdPartyRpcService_WechatRefreshUserToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyRpcServiceClient) WechatUserToken2UserInfo(ctx context.Context, in *WechatTokenReq, opts ...grpc.CallOption) (*WechatUserInfoResp, error) {
	out := new(WechatUserInfoResp)
	err := c.cc.Invoke(ctx, ThirdPartyRpcService_WechatUserToken2UserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyRpcServiceClient) WechatMiniAppCode2Session(ctx context.Context, in *WechatCodeReq, opts ...grpc.CallOption) (*WechatMiniAppCodeResp, error) {
	out := new(WechatMiniAppCodeResp)
	err := c.cc.Invoke(ctx, ThirdPartyRpcService_WechatMiniAppCode2Session_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyRpcServiceClient) WechatMiniAppCode2Phone(ctx context.Context, in *WechatCodeReq, opts ...grpc.CallOption) (*WechatMiniAppCode2PhoneResp, error) {
	out := new(WechatMiniAppCode2PhoneResp)
	err := c.cc.Invoke(ctx, ThirdPartyRpcService_WechatMiniAppCode2Phone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyRpcServiceClient) WechatWebRedirectWechat(ctx context.Context, in *WechatWebRedirectReq, opts ...grpc.CallOption) (*WechatWebRedirectResp, error) {
	out := new(WechatWebRedirectResp)
	err := c.cc.Invoke(ctx, ThirdPartyRpcService_WechatWebRedirectWechat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyRpcServiceClient) WechatWebAutoRedirectWechat(ctx context.Context, in *WechatWebAutoRedirectReq, opts ...grpc.CallOption) (*WechatWebAutoRedirectResp, error) {
	out := new(WechatWebAutoRedirectResp)
	err := c.cc.Invoke(ctx, ThirdPartyRpcService_WechatWebAutoRedirectWechat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyRpcServiceClient) WechatOfficialAccountAccessToken(ctx context.Context, in *WechatOaKeyReq, opts ...grpc.CallOption) (*WechatOaAccessTokenResp, error) {
	out := new(WechatOaAccessTokenResp)
	err := c.cc.Invoke(ctx, ThirdPartyRpcService_WechatOfficialAccountAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyRpcServiceClient) WechatOfficialAccountJsApiTicket(ctx context.Context, in *WechatOaKeyReq, opts ...grpc.CallOption) (*WechatOaJsApiTicketResp, error) {
	out := new(WechatOaJsApiTicketResp)
	err := c.cc.Invoke(ctx, ThirdPartyRpcService_WechatOfficialAccountJsApiTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyRpcServiceClient) DYMiniGameCode2Token(ctx context.Context, in *DYMiniGameCode2TokenReq, opts ...grpc.CallOption) (*DYMiniGameCode2TokenResp, error) {
	out := new(DYMiniGameCode2TokenResp)
	err := c.cc.Invoke(ctx, ThirdPartyRpcService_DYMiniGameCode2Token_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyRpcServiceClient) DYMiniGameOAAccessToken(ctx context.Context, in *DYMiniGameOAAccessTokenReq, opts ...grpc.CallOption) (*DYMiniGameOAAccessTokenResp, error) {
	out := new(DYMiniGameOAAccessTokenResp)
	err := c.cc.Invoke(ctx, ThirdPartyRpcService_DYMiniGameOAAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThirdPartyRpcServiceServer is the server API for ThirdPartyRpcService service.
// All implementations must embed UnimplementedThirdPartyRpcServiceServer
// for forward compatibility
type ThirdPartyRpcServiceServer interface {
	// note: 微信专区
	// note: 通用
	WechatCode2Token(context.Context, *WechatCodeReq) (*WechatCodeResp, error)
	WechatRefreshUserToken(context.Context, *WechatRefreshReq) (*WechatRefreshResp, error)
	WechatUserToken2UserInfo(context.Context, *WechatTokenReq) (*WechatUserInfoResp, error)
	// note: 小程序
	WechatMiniAppCode2Session(context.Context, *WechatCodeReq) (*WechatMiniAppCodeResp, error)
	WechatMiniAppCode2Phone(context.Context, *WechatCodeReq) (*WechatMiniAppCode2PhoneResp, error)
	// note: web
	WechatWebRedirectWechat(context.Context, *WechatWebRedirectReq) (*WechatWebRedirectResp, error)
	WechatWebAutoRedirectWechat(context.Context, *WechatWebAutoRedirectReq) (*WechatWebAutoRedirectResp, error)
	// note: base OfficialAccount 公众号基础能力
	WechatOfficialAccountAccessToken(context.Context, *WechatOaKeyReq) (*WechatOaAccessTokenResp, error)
	WechatOfficialAccountJsApiTicket(context.Context, *WechatOaKeyReq) (*WechatOaJsApiTicketResp, error)
	// note: 抖音专区
	DYMiniGameCode2Token(context.Context, *DYMiniGameCode2TokenReq) (*DYMiniGameCode2TokenResp, error)
	// note: base Game 小游戏基础能力
	DYMiniGameOAAccessToken(context.Context, *DYMiniGameOAAccessTokenReq) (*DYMiniGameOAAccessTokenResp, error)
	mustEmbedUnimplementedThirdPartyRpcServiceServer()
}

// UnimplementedThirdPartyRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedThirdPartyRpcServiceServer struct {
}

func (UnimplementedThirdPartyRpcServiceServer) WechatCode2Token(context.Context, *WechatCodeReq) (*WechatCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatCode2Token not implemented")
}
func (UnimplementedThirdPartyRpcServiceServer) WechatRefreshUserToken(context.Context, *WechatRefreshReq) (*WechatRefreshResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatRefreshUserToken not implemented")
}
func (UnimplementedThirdPartyRpcServiceServer) WechatUserToken2UserInfo(context.Context, *WechatTokenReq) (*WechatUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatUserToken2UserInfo not implemented")
}
func (UnimplementedThirdPartyRpcServiceServer) WechatMiniAppCode2Session(context.Context, *WechatCodeReq) (*WechatMiniAppCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatMiniAppCode2Session not implemented")
}
func (UnimplementedThirdPartyRpcServiceServer) WechatMiniAppCode2Phone(context.Context, *WechatCodeReq) (*WechatMiniAppCode2PhoneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatMiniAppCode2Phone not implemented")
}
func (UnimplementedThirdPartyRpcServiceServer) WechatWebRedirectWechat(context.Context, *WechatWebRedirectReq) (*WechatWebRedirectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatWebRedirectWechat not implemented")
}
func (UnimplementedThirdPartyRpcServiceServer) WechatWebAutoRedirectWechat(context.Context, *WechatWebAutoRedirectReq) (*WechatWebAutoRedirectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatWebAutoRedirectWechat not implemented")
}
func (UnimplementedThirdPartyRpcServiceServer) WechatOfficialAccountAccessToken(context.Context, *WechatOaKeyReq) (*WechatOaAccessTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatOfficialAccountAccessToken not implemented")
}
func (UnimplementedThirdPartyRpcServiceServer) WechatOfficialAccountJsApiTicket(context.Context, *WechatOaKeyReq) (*WechatOaJsApiTicketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatOfficialAccountJsApiTicket not implemented")
}
func (UnimplementedThirdPartyRpcServiceServer) DYMiniGameCode2Token(context.Context, *DYMiniGameCode2TokenReq) (*DYMiniGameCode2TokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DYMiniGameCode2Token not implemented")
}
func (UnimplementedThirdPartyRpcServiceServer) DYMiniGameOAAccessToken(context.Context, *DYMiniGameOAAccessTokenReq) (*DYMiniGameOAAccessTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DYMiniGameOAAccessToken not implemented")
}
func (UnimplementedThirdPartyRpcServiceServer) mustEmbedUnimplementedThirdPartyRpcServiceServer() {}

// UnsafeThirdPartyRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThirdPartyRpcServiceServer will
// result in compilation errors.
type UnsafeThirdPartyRpcServiceServer interface {
	mustEmbedUnimplementedThirdPartyRpcServiceServer()
}

func RegisterThirdPartyRpcServiceServer(s grpc.ServiceRegistrar, srv ThirdPartyRpcServiceServer) {
	s.RegisterService(&ThirdPartyRpcService_ServiceDesc, srv)
}

func _ThirdPartyRpcService_WechatCode2Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyRpcServiceServer).WechatCode2Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThirdPartyRpcService_WechatCode2Token_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyRpcServiceServer).WechatCode2Token(ctx, req.(*WechatCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdPartyRpcService_WechatRefreshUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatRefreshReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyRpcServiceServer).WechatRefreshUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThirdPartyRpcService_WechatRefreshUserToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyRpcServiceServer).WechatRefreshUserToken(ctx, req.(*WechatRefreshReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdPartyRpcService_WechatUserToken2UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyRpcServiceServer).WechatUserToken2UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThirdPartyRpcService_WechatUserToken2UserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyRpcServiceServer).WechatUserToken2UserInfo(ctx, req.(*WechatTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdPartyRpcService_WechatMiniAppCode2Session_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyRpcServiceServer).WechatMiniAppCode2Session(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThirdPartyRpcService_WechatMiniAppCode2Session_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyRpcServiceServer).WechatMiniAppCode2Session(ctx, req.(*WechatCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdPartyRpcService_WechatMiniAppCode2Phone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyRpcServiceServer).WechatMiniAppCode2Phone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThirdPartyRpcService_WechatMiniAppCode2Phone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyRpcServiceServer).WechatMiniAppCode2Phone(ctx, req.(*WechatCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdPartyRpcService_WechatWebRedirectWechat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatWebRedirectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyRpcServiceServer).WechatWebRedirectWechat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThirdPartyRpcService_WechatWebRedirectWechat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyRpcServiceServer).WechatWebRedirectWechat(ctx, req.(*WechatWebRedirectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdPartyRpcService_WechatWebAutoRedirectWechat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatWebAutoRedirectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyRpcServiceServer).WechatWebAutoRedirectWechat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThirdPartyRpcService_WechatWebAutoRedirectWechat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyRpcServiceServer).WechatWebAutoRedirectWechat(ctx, req.(*WechatWebAutoRedirectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdPartyRpcService_WechatOfficialAccountAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatOaKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyRpcServiceServer).WechatOfficialAccountAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThirdPartyRpcService_WechatOfficialAccountAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyRpcServiceServer).WechatOfficialAccountAccessToken(ctx, req.(*WechatOaKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdPartyRpcService_WechatOfficialAccountJsApiTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatOaKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyRpcServiceServer).WechatOfficialAccountJsApiTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThirdPartyRpcService_WechatOfficialAccountJsApiTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyRpcServiceServer).WechatOfficialAccountJsApiTicket(ctx, req.(*WechatOaKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdPartyRpcService_DYMiniGameCode2Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DYMiniGameCode2TokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyRpcServiceServer).DYMiniGameCode2Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThirdPartyRpcService_DYMiniGameCode2Token_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyRpcServiceServer).DYMiniGameCode2Token(ctx, req.(*DYMiniGameCode2TokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdPartyRpcService_DYMiniGameOAAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DYMiniGameOAAccessTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyRpcServiceServer).DYMiniGameOAAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThirdPartyRpcService_DYMiniGameOAAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyRpcServiceServer).DYMiniGameOAAccessToken(ctx, req.(*DYMiniGameOAAccessTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ThirdPartyRpcService_ServiceDesc is the grpc.ServiceDesc for ThirdPartyRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThirdPartyRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thirdparty.ThirdPartyRpcService",
	HandlerType: (*ThirdPartyRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WechatCode2Token",
			Handler:    _ThirdPartyRpcService_WechatCode2Token_Handler,
		},
		{
			MethodName: "WechatRefreshUserToken",
			Handler:    _ThirdPartyRpcService_WechatRefreshUserToken_Handler,
		},
		{
			MethodName: "WechatUserToken2UserInfo",
			Handler:    _ThirdPartyRpcService_WechatUserToken2UserInfo_Handler,
		},
		{
			MethodName: "WechatMiniAppCode2Session",
			Handler:    _ThirdPartyRpcService_WechatMiniAppCode2Session_Handler,
		},
		{
			MethodName: "WechatMiniAppCode2Phone",
			Handler:    _ThirdPartyRpcService_WechatMiniAppCode2Phone_Handler,
		},
		{
			MethodName: "WechatWebRedirectWechat",
			Handler:    _ThirdPartyRpcService_WechatWebRedirectWechat_Handler,
		},
		{
			MethodName: "WechatWebAutoRedirectWechat",
			Handler:    _ThirdPartyRpcService_WechatWebAutoRedirectWechat_Handler,
		},
		{
			MethodName: "WechatOfficialAccountAccessToken",
			Handler:    _ThirdPartyRpcService_WechatOfficialAccountAccessToken_Handler,
		},
		{
			MethodName: "WechatOfficialAccountJsApiTicket",
			Handler:    _ThirdPartyRpcService_WechatOfficialAccountJsApiTicket_Handler,
		},
		{
			MethodName: "DYMiniGameCode2Token",
			Handler:    _ThirdPartyRpcService_DYMiniGameCode2Token_Handler,
		},
		{
			MethodName: "DYMiniGameOAAccessToken",
			Handler:    _ThirdPartyRpcService_DYMiniGameOAAccessToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thirdparty.proto",
}
