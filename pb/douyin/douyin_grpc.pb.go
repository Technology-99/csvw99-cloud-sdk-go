// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: douyin.proto

package douyin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DouyinRpcService_Code2Token_FullMethodName                 = "/douyin.DouyinRpcService/Code2Token"
	DouyinRpcService_OfficialAccountAccessToken_FullMethodName = "/douyin.DouyinRpcService/OfficialAccountAccessToken"
)

// DouyinRpcServiceClient is the client API for DouyinRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DouyinRpcServiceClient interface {
	Code2Token(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*CodeResp, error)
	// note: base Game 小游戏基础能力
	OfficialAccountAccessToken(ctx context.Context, in *OaKeyReq, opts ...grpc.CallOption) (*OaAccessTokenResp, error)
}

type douyinRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDouyinRpcServiceClient(cc grpc.ClientConnInterface) DouyinRpcServiceClient {
	return &douyinRpcServiceClient{cc}
}

func (c *douyinRpcServiceClient) Code2Token(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*CodeResp, error) {
	out := new(CodeResp)
	err := c.cc.Invoke(ctx, DouyinRpcService_Code2Token_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *douyinRpcServiceClient) OfficialAccountAccessToken(ctx context.Context, in *OaKeyReq, opts ...grpc.CallOption) (*OaAccessTokenResp, error) {
	out := new(OaAccessTokenResp)
	err := c.cc.Invoke(ctx, DouyinRpcService_OfficialAccountAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DouyinRpcServiceServer is the server API for DouyinRpcService service.
// All implementations must embed UnimplementedDouyinRpcServiceServer
// for forward compatibility
type DouyinRpcServiceServer interface {
	Code2Token(context.Context, *CodeReq) (*CodeResp, error)
	// note: base Game 小游戏基础能力
	OfficialAccountAccessToken(context.Context, *OaKeyReq) (*OaAccessTokenResp, error)
	mustEmbedUnimplementedDouyinRpcServiceServer()
}

// UnimplementedDouyinRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDouyinRpcServiceServer struct {
}

func (UnimplementedDouyinRpcServiceServer) Code2Token(context.Context, *CodeReq) (*CodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Code2Token not implemented")
}
func (UnimplementedDouyinRpcServiceServer) OfficialAccountAccessToken(context.Context, *OaKeyReq) (*OaAccessTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfficialAccountAccessToken not implemented")
}
func (UnimplementedDouyinRpcServiceServer) mustEmbedUnimplementedDouyinRpcServiceServer() {}

// UnsafeDouyinRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DouyinRpcServiceServer will
// result in compilation errors.
type UnsafeDouyinRpcServiceServer interface {
	mustEmbedUnimplementedDouyinRpcServiceServer()
}

func RegisterDouyinRpcServiceServer(s grpc.ServiceRegistrar, srv DouyinRpcServiceServer) {
	s.RegisterService(&DouyinRpcService_ServiceDesc, srv)
}

func _DouyinRpcService_Code2Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DouyinRpcServiceServer).Code2Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DouyinRpcService_Code2Token_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DouyinRpcServiceServer).Code2Token(ctx, req.(*CodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DouyinRpcService_OfficialAccountAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OaKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DouyinRpcServiceServer).OfficialAccountAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DouyinRpcService_OfficialAccountAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DouyinRpcServiceServer).OfficialAccountAccessToken(ctx, req.(*OaKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DouyinRpcService_ServiceDesc is the grpc.ServiceDesc for DouyinRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DouyinRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "douyin.DouyinRpcService",
	HandlerType: (*DouyinRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Code2Token",
			Handler:    _DouyinRpcService_Code2Token_Handler,
		},
		{
			MethodName: "OfficialAccountAccessToken",
			Handler:    _DouyinRpcService_OfficialAccountAccessToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "douyin.proto",
}
