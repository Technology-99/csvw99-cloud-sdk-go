// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: label.proto

package label

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LabelRpcService_Create_FullMethodName       = "/label.LabelRpcService/Create"
	LabelRpcService_Update_FullMethodName       = "/label.LabelRpcService/Update"
	LabelRpcService_Delete_FullMethodName       = "/label.LabelRpcService/Delete"
	LabelRpcService_DeleteIds_FullMethodName    = "/label.LabelRpcService/DeleteIds"
	LabelRpcService_Query_FullMethodName        = "/label.LabelRpcService/Query"
	LabelRpcService_QueryList_FullMethodName    = "/label.LabelRpcService/QueryList"
	LabelRpcService_UpdateStatus_FullMethodName = "/label.LabelRpcService/UpdateStatus"
)

// LabelRpcServiceClient is the client API for LabelRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LabelRpcServiceClient interface {
	Create(ctx context.Context, in *CreateLabelReq, opts ...grpc.CallOption) (*CreateLabelResp, error)
	Update(ctx context.Context, in *UpdateLabelReq, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Response, error)
	DeleteIds(ctx context.Context, in *DeleteIdsReq, opts ...grpc.CallOption) (*Response, error)
	Query(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryLabelResp, error)
	QueryList(ctx context.Context, in *QueryLabelListReq, opts ...grpc.CallOption) (*QueryLabelListResp, error)
	UpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*Response, error)
}

type labelRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLabelRpcServiceClient(cc grpc.ClientConnInterface) LabelRpcServiceClient {
	return &labelRpcServiceClient{cc}
}

func (c *labelRpcServiceClient) Create(ctx context.Context, in *CreateLabelReq, opts ...grpc.CallOption) (*CreateLabelResp, error) {
	out := new(CreateLabelResp)
	err := c.cc.Invoke(ctx, LabelRpcService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelRpcServiceClient) Update(ctx context.Context, in *UpdateLabelReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, LabelRpcService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelRpcServiceClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, LabelRpcService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelRpcServiceClient) DeleteIds(ctx context.Context, in *DeleteIdsReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, LabelRpcService_DeleteIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelRpcServiceClient) Query(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryLabelResp, error) {
	out := new(QueryLabelResp)
	err := c.cc.Invoke(ctx, LabelRpcService_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelRpcServiceClient) QueryList(ctx context.Context, in *QueryLabelListReq, opts ...grpc.CallOption) (*QueryLabelListResp, error) {
	out := new(QueryLabelListResp)
	err := c.cc.Invoke(ctx, LabelRpcService_QueryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelRpcServiceClient) UpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, LabelRpcService_UpdateStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LabelRpcServiceServer is the server API for LabelRpcService service.
// All implementations must embed UnimplementedLabelRpcServiceServer
// for forward compatibility
type LabelRpcServiceServer interface {
	Create(context.Context, *CreateLabelReq) (*CreateLabelResp, error)
	Update(context.Context, *UpdateLabelReq) (*Response, error)
	Delete(context.Context, *DeleteReq) (*Response, error)
	DeleteIds(context.Context, *DeleteIdsReq) (*Response, error)
	Query(context.Context, *QueryReq) (*QueryLabelResp, error)
	QueryList(context.Context, *QueryLabelListReq) (*QueryLabelListResp, error)
	UpdateStatus(context.Context, *UpdateStatusReq) (*Response, error)
	mustEmbedUnimplementedLabelRpcServiceServer()
}

// UnimplementedLabelRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLabelRpcServiceServer struct {
}

func (UnimplementedLabelRpcServiceServer) Create(context.Context, *CreateLabelReq) (*CreateLabelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedLabelRpcServiceServer) Update(context.Context, *UpdateLabelReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedLabelRpcServiceServer) Delete(context.Context, *DeleteReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedLabelRpcServiceServer) DeleteIds(context.Context, *DeleteIdsReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIds not implemented")
}
func (UnimplementedLabelRpcServiceServer) Query(context.Context, *QueryReq) (*QueryLabelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedLabelRpcServiceServer) QueryList(context.Context, *QueryLabelListReq) (*QueryLabelListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryList not implemented")
}
func (UnimplementedLabelRpcServiceServer) UpdateStatus(context.Context, *UpdateStatusReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedLabelRpcServiceServer) mustEmbedUnimplementedLabelRpcServiceServer() {}

// UnsafeLabelRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LabelRpcServiceServer will
// result in compilation errors.
type UnsafeLabelRpcServiceServer interface {
	mustEmbedUnimplementedLabelRpcServiceServer()
}

func RegisterLabelRpcServiceServer(s grpc.ServiceRegistrar, srv LabelRpcServiceServer) {
	s.RegisterService(&LabelRpcService_ServiceDesc, srv)
}

func _LabelRpcService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelRpcServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabelRpcService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelRpcServiceServer).Create(ctx, req.(*CreateLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelRpcService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelRpcServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabelRpcService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelRpcServiceServer).Update(ctx, req.(*UpdateLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelRpcService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelRpcServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabelRpcService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelRpcServiceServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelRpcService_DeleteIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelRpcServiceServer).DeleteIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabelRpcService_DeleteIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelRpcServiceServer).DeleteIds(ctx, req.(*DeleteIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelRpcService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelRpcServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabelRpcService_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelRpcServiceServer).Query(ctx, req.(*QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelRpcService_QueryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLabelListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelRpcServiceServer).QueryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabelRpcService_QueryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelRpcServiceServer).QueryList(ctx, req.(*QueryLabelListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabelRpcService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelRpcServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabelRpcService_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelRpcServiceServer).UpdateStatus(ctx, req.(*UpdateStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LabelRpcService_ServiceDesc is the grpc.ServiceDesc for LabelRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LabelRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "label.LabelRpcService",
	HandlerType: (*LabelRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _LabelRpcService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _LabelRpcService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _LabelRpcService_Delete_Handler,
		},
		{
			MethodName: "DeleteIds",
			Handler:    _LabelRpcService_DeleteIds_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _LabelRpcService_Query_Handler,
		},
		{
			MethodName: "QueryList",
			Handler:    _LabelRpcService_QueryList_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _LabelRpcService_UpdateStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "label.proto",
}
