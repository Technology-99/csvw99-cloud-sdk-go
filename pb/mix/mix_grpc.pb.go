// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: mix.proto

package mix

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MixService_SendSms_FullMethodName            = "/mix.MixService/SendSms"
	MixService_CheckSms_FullMethodName           = "/mix.MixService/CheckSms"
	MixService_CheckEmsRpc_FullMethodName        = "/mix.MixService/CheckEmsRpc"
	MixService_SendEmsRpc_FullMethodName         = "/mix.MixService/SendEmsRpc"
	MixService_GenerateUploadSign_FullMethodName = "/mix.MixService/GenerateUploadSign"
	MixService_CheckUploadResult_FullMethodName  = "/mix.MixService/CheckUploadResult"
	MixService_Callback_FullMethodName           = "/mix.MixService/Callback"
	MixService_CaptchaGenerate_FullMethodName    = "/mix.MixService/CaptchaGenerate"
)

// MixServiceClient is the client API for MixService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MixServiceClient interface {
	// note: 短信服务
	SendSms(ctx context.Context, in *SmsParams, opts ...grpc.CallOption) (*SmsResp, error)
	CheckSms(ctx context.Context, in *SmsSearchParams, opts ...grpc.CallOption) (*SmsResp, error)
	// note: 邮件服务
	CheckEmsRpc(ctx context.Context, in *EmsReq, opts ...grpc.CallOption) (*EmsResp, error)
	SendEmsRpc(ctx context.Context, in *EmsReq, opts ...grpc.CallOption) (*EmsResp, error)
	// note: 云存储服务
	GenerateUploadSign(ctx context.Context, in *GenerateUploadSignParams, opts ...grpc.CallOption) (*GenerateUploadSignParamsResp, error)
	CheckUploadResult(ctx context.Context, in *CheckUploadResultParams, opts ...grpc.CallOption) (*CheckUploadResultResp, error)
	Callback(ctx context.Context, in *CallbackParams, opts ...grpc.CallOption) (*CallbackResp, error)
	// note: 验证码服务
	CaptchaGenerate(ctx context.Context, in *CaptchaReq, opts ...grpc.CallOption) (*CaptchaResp, error)
}

type mixServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMixServiceClient(cc grpc.ClientConnInterface) MixServiceClient {
	return &mixServiceClient{cc}
}

func (c *mixServiceClient) SendSms(ctx context.Context, in *SmsParams, opts ...grpc.CallOption) (*SmsResp, error) {
	out := new(SmsResp)
	err := c.cc.Invoke(ctx, MixService_SendSms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixServiceClient) CheckSms(ctx context.Context, in *SmsSearchParams, opts ...grpc.CallOption) (*SmsResp, error) {
	out := new(SmsResp)
	err := c.cc.Invoke(ctx, MixService_CheckSms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixServiceClient) CheckEmsRpc(ctx context.Context, in *EmsReq, opts ...grpc.CallOption) (*EmsResp, error) {
	out := new(EmsResp)
	err := c.cc.Invoke(ctx, MixService_CheckEmsRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixServiceClient) SendEmsRpc(ctx context.Context, in *EmsReq, opts ...grpc.CallOption) (*EmsResp, error) {
	out := new(EmsResp)
	err := c.cc.Invoke(ctx, MixService_SendEmsRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixServiceClient) GenerateUploadSign(ctx context.Context, in *GenerateUploadSignParams, opts ...grpc.CallOption) (*GenerateUploadSignParamsResp, error) {
	out := new(GenerateUploadSignParamsResp)
	err := c.cc.Invoke(ctx, MixService_GenerateUploadSign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixServiceClient) CheckUploadResult(ctx context.Context, in *CheckUploadResultParams, opts ...grpc.CallOption) (*CheckUploadResultResp, error) {
	out := new(CheckUploadResultResp)
	err := c.cc.Invoke(ctx, MixService_CheckUploadResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixServiceClient) Callback(ctx context.Context, in *CallbackParams, opts ...grpc.CallOption) (*CallbackResp, error) {
	out := new(CallbackResp)
	err := c.cc.Invoke(ctx, MixService_Callback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mixServiceClient) CaptchaGenerate(ctx context.Context, in *CaptchaReq, opts ...grpc.CallOption) (*CaptchaResp, error) {
	out := new(CaptchaResp)
	err := c.cc.Invoke(ctx, MixService_CaptchaGenerate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MixServiceServer is the server API for MixService service.
// All implementations must embed UnimplementedMixServiceServer
// for forward compatibility
type MixServiceServer interface {
	// note: 短信服务
	SendSms(context.Context, *SmsParams) (*SmsResp, error)
	CheckSms(context.Context, *SmsSearchParams) (*SmsResp, error)
	// note: 邮件服务
	CheckEmsRpc(context.Context, *EmsReq) (*EmsResp, error)
	SendEmsRpc(context.Context, *EmsReq) (*EmsResp, error)
	// note: 云存储服务
	GenerateUploadSign(context.Context, *GenerateUploadSignParams) (*GenerateUploadSignParamsResp, error)
	CheckUploadResult(context.Context, *CheckUploadResultParams) (*CheckUploadResultResp, error)
	Callback(context.Context, *CallbackParams) (*CallbackResp, error)
	// note: 验证码服务
	CaptchaGenerate(context.Context, *CaptchaReq) (*CaptchaResp, error)
	mustEmbedUnimplementedMixServiceServer()
}

// UnimplementedMixServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMixServiceServer struct {
}

func (UnimplementedMixServiceServer) SendSms(context.Context, *SmsParams) (*SmsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSms not implemented")
}
func (UnimplementedMixServiceServer) CheckSms(context.Context, *SmsSearchParams) (*SmsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSms not implemented")
}
func (UnimplementedMixServiceServer) CheckEmsRpc(context.Context, *EmsReq) (*EmsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEmsRpc not implemented")
}
func (UnimplementedMixServiceServer) SendEmsRpc(context.Context, *EmsReq) (*EmsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmsRpc not implemented")
}
func (UnimplementedMixServiceServer) GenerateUploadSign(context.Context, *GenerateUploadSignParams) (*GenerateUploadSignParamsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateUploadSign not implemented")
}
func (UnimplementedMixServiceServer) CheckUploadResult(context.Context, *CheckUploadResultParams) (*CheckUploadResultResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUploadResult not implemented")
}
func (UnimplementedMixServiceServer) Callback(context.Context, *CallbackParams) (*CallbackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Callback not implemented")
}
func (UnimplementedMixServiceServer) CaptchaGenerate(context.Context, *CaptchaReq) (*CaptchaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptchaGenerate not implemented")
}
func (UnimplementedMixServiceServer) mustEmbedUnimplementedMixServiceServer() {}

// UnsafeMixServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MixServiceServer will
// result in compilation errors.
type UnsafeMixServiceServer interface {
	mustEmbedUnimplementedMixServiceServer()
}

func RegisterMixServiceServer(s grpc.ServiceRegistrar, srv MixServiceServer) {
	s.RegisterService(&MixService_ServiceDesc, srv)
}

func _MixService_SendSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixServiceServer).SendSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MixService_SendSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixServiceServer).SendSms(ctx, req.(*SmsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixService_CheckSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsSearchParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixServiceServer).CheckSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MixService_CheckSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixServiceServer).CheckSms(ctx, req.(*SmsSearchParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixService_CheckEmsRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixServiceServer).CheckEmsRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MixService_CheckEmsRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixServiceServer).CheckEmsRpc(ctx, req.(*EmsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixService_SendEmsRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixServiceServer).SendEmsRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MixService_SendEmsRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixServiceServer).SendEmsRpc(ctx, req.(*EmsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixService_GenerateUploadSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateUploadSignParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixServiceServer).GenerateUploadSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MixService_GenerateUploadSign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixServiceServer).GenerateUploadSign(ctx, req.(*GenerateUploadSignParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixService_CheckUploadResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUploadResultParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixServiceServer).CheckUploadResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MixService_CheckUploadResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixServiceServer).CheckUploadResult(ctx, req.(*CheckUploadResultParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixService_Callback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixServiceServer).Callback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MixService_Callback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixServiceServer).Callback(ctx, req.(*CallbackParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MixService_CaptchaGenerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptchaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MixServiceServer).CaptchaGenerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MixService_CaptchaGenerate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MixServiceServer).CaptchaGenerate(ctx, req.(*CaptchaReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MixService_ServiceDesc is the grpc.ServiceDesc for MixService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MixService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mix.MixService",
	HandlerType: (*MixServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSms",
			Handler:    _MixService_SendSms_Handler,
		},
		{
			MethodName: "CheckSms",
			Handler:    _MixService_CheckSms_Handler,
		},
		{
			MethodName: "CheckEmsRpc",
			Handler:    _MixService_CheckEmsRpc_Handler,
		},
		{
			MethodName: "SendEmsRpc",
			Handler:    _MixService_SendEmsRpc_Handler,
		},
		{
			MethodName: "GenerateUploadSign",
			Handler:    _MixService_GenerateUploadSign_Handler,
		},
		{
			MethodName: "CheckUploadResult",
			Handler:    _MixService_CheckUploadResult_Handler,
		},
		{
			MethodName: "Callback",
			Handler:    _MixService_Callback_Handler,
		},
		{
			MethodName: "CaptchaGenerate",
			Handler:    _MixService_CaptchaGenerate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mix.proto",
}
