// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: cloudc.proto

package cloudc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CloudCRpcService_SlsConfigSet_FullMethodName        = "/cloudc.CloudCRpcService/SlsConfigSet"
	CloudCRpcService_SlsConfigGet_FullMethodName        = "/cloudc.CloudCRpcService/SlsConfigGet"
	CloudCRpcService_SlsConfigGetAll_FullMethodName     = "/cloudc.CloudCRpcService/SlsConfigGetAll"
	CloudCRpcService_SystemConfigSet_FullMethodName     = "/cloudc.CloudCRpcService/SystemConfigSet"
	CloudCRpcService_SystemConfigGet_FullMethodName     = "/cloudc.CloudCRpcService/SystemConfigGet"
	CloudCRpcService_SystemConfigGetAll_FullMethodName  = "/cloudc.CloudCRpcService/SystemConfigGetAll"
	CloudCRpcService_CaptchaConfigSet_FullMethodName    = "/cloudc.CloudCRpcService/CaptchaConfigSet"
	CloudCRpcService_CaptchaConfigGet_FullMethodName    = "/cloudc.CloudCRpcService/CaptchaConfigGet"
	CloudCRpcService_CaptchaConfigGetAll_FullMethodName = "/cloudc.CloudCRpcService/CaptchaConfigGetAll"
	CloudCRpcService_DouyinConfigSet_FullMethodName     = "/cloudc.CloudCRpcService/DouyinConfigSet"
	CloudCRpcService_DouyinConfigGet_FullMethodName     = "/cloudc.CloudCRpcService/DouyinConfigGet"
	CloudCRpcService_DouyinConfigGetAll_FullMethodName  = "/cloudc.CloudCRpcService/DouyinConfigGetAll"
	CloudCRpcService_WechatConfigSet_FullMethodName     = "/cloudc.CloudCRpcService/WechatConfigSet"
	CloudCRpcService_WechatConfigGet_FullMethodName     = "/cloudc.CloudCRpcService/WechatConfigGet"
	CloudCRpcService_WechatConfigGetAll_FullMethodName  = "/cloudc.CloudCRpcService/WechatConfigGetAll"
	CloudCRpcService_SmsConfigSet_FullMethodName        = "/cloudc.CloudCRpcService/SmsConfigSet"
	CloudCRpcService_SmsConfigGet_FullMethodName        = "/cloudc.CloudCRpcService/SmsConfigGet"
	CloudCRpcService_SmsConfigGetAll_FullMethodName     = "/cloudc.CloudCRpcService/SmsConfigGetAll"
	CloudCRpcService_EmsConfigSet_FullMethodName        = "/cloudc.CloudCRpcService/EmsConfigSet"
	CloudCRpcService_EmsConfigGet_FullMethodName        = "/cloudc.CloudCRpcService/EmsConfigGet"
	CloudCRpcService_EmsConfigGetAll_FullMethodName     = "/cloudc.CloudCRpcService/EmsConfigGetAll"
	CloudCRpcService_OssConfigSet_FullMethodName        = "/cloudc.CloudCRpcService/OssConfigSet"
	CloudCRpcService_OssConfigGet_FullMethodName        = "/cloudc.CloudCRpcService/OssConfigGet"
	CloudCRpcService_OssConfigGetAll_FullMethodName     = "/cloudc.CloudCRpcService/OssConfigGetAll"
)

// CloudCRpcServiceClient is the client API for CloudCRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudCRpcServiceClient interface {
	// note: 服务器系统配置
	SlsConfigSet(ctx context.Context, in *SlsConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error)
	SlsConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*SlsConfigGetResp, error)
	SlsConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*SlsConfigGetAllResp, error)
	// note: 服务器系统配置
	SystemConfigSet(ctx context.Context, in *SystemConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error)
	SystemConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*SystemConfigGetResp, error)
	SystemConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*SystemConfigGetAllResp, error)
	// note: captcha
	CaptchaConfigSet(ctx context.Context, in *CaptchaConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error)
	CaptchaConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*CaptchaConfigGetResp, error)
	CaptchaConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*CaptchaConfigGetAllResp, error)
	// note: 新增配置
	DouyinConfigSet(ctx context.Context, in *DouyinConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error)
	DouyinConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*DouyinConfigGetResp, error)
	DouyinConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*DouyinConfigGetAllResp, error)
	// note: 新增配置
	WechatConfigSet(ctx context.Context, in *WechatConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error)
	WechatConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*WechatConfigGetResp, error)
	WechatConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*WechatConfigGetAllResp, error)
	// rpc WechatConfigCache(WechatConfigGetAllParams) returns (WechatConfigGetAllResp);
	// note: 短信配置
	SmsConfigSet(ctx context.Context, in *SmsConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error)
	SmsConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*SmsConfigGetResp, error)
	SmsConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*SmsConfigGetAllResp, error)
	// note: 短信配置
	EmsConfigSet(ctx context.Context, in *EmsConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error)
	EmsConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*EmsConfigGetResp, error)
	EmsConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*EmsConfigGetAllResp, error)
	// note: Oss配置
	OssConfigSet(ctx context.Context, in *OssConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error)
	OssConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*OssConfigGetResp, error)
	OssConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*OssConfigGetAllResp, error)
}

type cloudCRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudCRpcServiceClient(cc grpc.ClientConnInterface) CloudCRpcServiceClient {
	return &cloudCRpcServiceClient{cc}
}

func (c *cloudCRpcServiceClient) SlsConfigSet(ctx context.Context, in *SlsConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error) {
	out := new(ConfigResp)
	err := c.cc.Invoke(ctx, CloudCRpcService_SlsConfigSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCRpcServiceClient) SlsConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*SlsConfigGetResp, error) {
	out := new(SlsConfigGetResp)
	err := c.cc.Invoke(ctx, CloudCRpcService_SlsConfigGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCRpcServiceClient) SlsConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*SlsConfigGetAllResp, error) {
	out := new(SlsConfigGetAllResp)
	err := c.cc.Invoke(ctx, CloudCRpcService_SlsConfigGetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCRpcServiceClient) SystemConfigSet(ctx context.Context, in *SystemConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error) {
	out := new(ConfigResp)
	err := c.cc.Invoke(ctx, CloudCRpcService_SystemConfigSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCRpcServiceClient) SystemConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*SystemConfigGetResp, error) {
	out := new(SystemConfigGetResp)
	err := c.cc.Invoke(ctx, CloudCRpcService_SystemConfigGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCRpcServiceClient) SystemConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*SystemConfigGetAllResp, error) {
	out := new(SystemConfigGetAllResp)
	err := c.cc.Invoke(ctx, CloudCRpcService_SystemConfigGetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCRpcServiceClient) CaptchaConfigSet(ctx context.Context, in *CaptchaConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error) {
	out := new(ConfigResp)
	err := c.cc.Invoke(ctx, CloudCRpcService_CaptchaConfigSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCRpcServiceClient) CaptchaConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*CaptchaConfigGetResp, error) {
	out := new(CaptchaConfigGetResp)
	err := c.cc.Invoke(ctx, CloudCRpcService_CaptchaConfigGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCRpcServiceClient) CaptchaConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*CaptchaConfigGetAllResp, error) {
	out := new(CaptchaConfigGetAllResp)
	err := c.cc.Invoke(ctx, CloudCRpcService_CaptchaConfigGetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCRpcServiceClient) DouyinConfigSet(ctx context.Context, in *DouyinConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error) {
	out := new(ConfigResp)
	err := c.cc.Invoke(ctx, CloudCRpcService_DouyinConfigSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCRpcServiceClient) DouyinConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*DouyinConfigGetResp, error) {
	out := new(DouyinConfigGetResp)
	err := c.cc.Invoke(ctx, CloudCRpcService_DouyinConfigGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCRpcServiceClient) DouyinConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*DouyinConfigGetAllResp, error) {
	out := new(DouyinConfigGetAllResp)
	err := c.cc.Invoke(ctx, CloudCRpcService_DouyinConfigGetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCRpcServiceClient) WechatConfigSet(ctx context.Context, in *WechatConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error) {
	out := new(ConfigResp)
	err := c.cc.Invoke(ctx, CloudCRpcService_WechatConfigSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCRpcServiceClient) WechatConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*WechatConfigGetResp, error) {
	out := new(WechatConfigGetResp)
	err := c.cc.Invoke(ctx, CloudCRpcService_WechatConfigGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCRpcServiceClient) WechatConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*WechatConfigGetAllResp, error) {
	out := new(WechatConfigGetAllResp)
	err := c.cc.Invoke(ctx, CloudCRpcService_WechatConfigGetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCRpcServiceClient) SmsConfigSet(ctx context.Context, in *SmsConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error) {
	out := new(ConfigResp)
	err := c.cc.Invoke(ctx, CloudCRpcService_SmsConfigSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCRpcServiceClient) SmsConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*SmsConfigGetResp, error) {
	out := new(SmsConfigGetResp)
	err := c.cc.Invoke(ctx, CloudCRpcService_SmsConfigGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCRpcServiceClient) SmsConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*SmsConfigGetAllResp, error) {
	out := new(SmsConfigGetAllResp)
	err := c.cc.Invoke(ctx, CloudCRpcService_SmsConfigGetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCRpcServiceClient) EmsConfigSet(ctx context.Context, in *EmsConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error) {
	out := new(ConfigResp)
	err := c.cc.Invoke(ctx, CloudCRpcService_EmsConfigSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCRpcServiceClient) EmsConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*EmsConfigGetResp, error) {
	out := new(EmsConfigGetResp)
	err := c.cc.Invoke(ctx, CloudCRpcService_EmsConfigGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCRpcServiceClient) EmsConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*EmsConfigGetAllResp, error) {
	out := new(EmsConfigGetAllResp)
	err := c.cc.Invoke(ctx, CloudCRpcService_EmsConfigGetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCRpcServiceClient) OssConfigSet(ctx context.Context, in *OssConfigSetParams, opts ...grpc.CallOption) (*ConfigResp, error) {
	out := new(ConfigResp)
	err := c.cc.Invoke(ctx, CloudCRpcService_OssConfigSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCRpcServiceClient) OssConfigGet(ctx context.Context, in *ConfigGetParams, opts ...grpc.CallOption) (*OssConfigGetResp, error) {
	out := new(OssConfigGetResp)
	err := c.cc.Invoke(ctx, CloudCRpcService_OssConfigGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCRpcServiceClient) OssConfigGetAll(ctx context.Context, in *ConfigGetAllParams, opts ...grpc.CallOption) (*OssConfigGetAllResp, error) {
	out := new(OssConfigGetAllResp)
	err := c.cc.Invoke(ctx, CloudCRpcService_OssConfigGetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudCRpcServiceServer is the server API for CloudCRpcService service.
// All implementations must embed UnimplementedCloudCRpcServiceServer
// for forward compatibility
type CloudCRpcServiceServer interface {
	// note: 服务器系统配置
	SlsConfigSet(context.Context, *SlsConfigSetParams) (*ConfigResp, error)
	SlsConfigGet(context.Context, *ConfigGetParams) (*SlsConfigGetResp, error)
	SlsConfigGetAll(context.Context, *ConfigGetAllParams) (*SlsConfigGetAllResp, error)
	// note: 服务器系统配置
	SystemConfigSet(context.Context, *SystemConfigSetParams) (*ConfigResp, error)
	SystemConfigGet(context.Context, *ConfigGetParams) (*SystemConfigGetResp, error)
	SystemConfigGetAll(context.Context, *ConfigGetAllParams) (*SystemConfigGetAllResp, error)
	// note: captcha
	CaptchaConfigSet(context.Context, *CaptchaConfigSetParams) (*ConfigResp, error)
	CaptchaConfigGet(context.Context, *ConfigGetParams) (*CaptchaConfigGetResp, error)
	CaptchaConfigGetAll(context.Context, *ConfigGetAllParams) (*CaptchaConfigGetAllResp, error)
	// note: 新增配置
	DouyinConfigSet(context.Context, *DouyinConfigSetParams) (*ConfigResp, error)
	DouyinConfigGet(context.Context, *ConfigGetParams) (*DouyinConfigGetResp, error)
	DouyinConfigGetAll(context.Context, *ConfigGetAllParams) (*DouyinConfigGetAllResp, error)
	// note: 新增配置
	WechatConfigSet(context.Context, *WechatConfigSetParams) (*ConfigResp, error)
	WechatConfigGet(context.Context, *ConfigGetParams) (*WechatConfigGetResp, error)
	WechatConfigGetAll(context.Context, *ConfigGetAllParams) (*WechatConfigGetAllResp, error)
	// rpc WechatConfigCache(WechatConfigGetAllParams) returns (WechatConfigGetAllResp);
	// note: 短信配置
	SmsConfigSet(context.Context, *SmsConfigSetParams) (*ConfigResp, error)
	SmsConfigGet(context.Context, *ConfigGetParams) (*SmsConfigGetResp, error)
	SmsConfigGetAll(context.Context, *ConfigGetAllParams) (*SmsConfigGetAllResp, error)
	// note: 短信配置
	EmsConfigSet(context.Context, *EmsConfigSetParams) (*ConfigResp, error)
	EmsConfigGet(context.Context, *ConfigGetParams) (*EmsConfigGetResp, error)
	EmsConfigGetAll(context.Context, *ConfigGetAllParams) (*EmsConfigGetAllResp, error)
	// note: Oss配置
	OssConfigSet(context.Context, *OssConfigSetParams) (*ConfigResp, error)
	OssConfigGet(context.Context, *ConfigGetParams) (*OssConfigGetResp, error)
	OssConfigGetAll(context.Context, *ConfigGetAllParams) (*OssConfigGetAllResp, error)
	mustEmbedUnimplementedCloudCRpcServiceServer()
}

// UnimplementedCloudCRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloudCRpcServiceServer struct {
}

func (UnimplementedCloudCRpcServiceServer) SlsConfigSet(context.Context, *SlsConfigSetParams) (*ConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlsConfigSet not implemented")
}
func (UnimplementedCloudCRpcServiceServer) SlsConfigGet(context.Context, *ConfigGetParams) (*SlsConfigGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlsConfigGet not implemented")
}
func (UnimplementedCloudCRpcServiceServer) SlsConfigGetAll(context.Context, *ConfigGetAllParams) (*SlsConfigGetAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlsConfigGetAll not implemented")
}
func (UnimplementedCloudCRpcServiceServer) SystemConfigSet(context.Context, *SystemConfigSetParams) (*ConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemConfigSet not implemented")
}
func (UnimplementedCloudCRpcServiceServer) SystemConfigGet(context.Context, *ConfigGetParams) (*SystemConfigGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemConfigGet not implemented")
}
func (UnimplementedCloudCRpcServiceServer) SystemConfigGetAll(context.Context, *ConfigGetAllParams) (*SystemConfigGetAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemConfigGetAll not implemented")
}
func (UnimplementedCloudCRpcServiceServer) CaptchaConfigSet(context.Context, *CaptchaConfigSetParams) (*ConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptchaConfigSet not implemented")
}
func (UnimplementedCloudCRpcServiceServer) CaptchaConfigGet(context.Context, *ConfigGetParams) (*CaptchaConfigGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptchaConfigGet not implemented")
}
func (UnimplementedCloudCRpcServiceServer) CaptchaConfigGetAll(context.Context, *ConfigGetAllParams) (*CaptchaConfigGetAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptchaConfigGetAll not implemented")
}
func (UnimplementedCloudCRpcServiceServer) DouyinConfigSet(context.Context, *DouyinConfigSetParams) (*ConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DouyinConfigSet not implemented")
}
func (UnimplementedCloudCRpcServiceServer) DouyinConfigGet(context.Context, *ConfigGetParams) (*DouyinConfigGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DouyinConfigGet not implemented")
}
func (UnimplementedCloudCRpcServiceServer) DouyinConfigGetAll(context.Context, *ConfigGetAllParams) (*DouyinConfigGetAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DouyinConfigGetAll not implemented")
}
func (UnimplementedCloudCRpcServiceServer) WechatConfigSet(context.Context, *WechatConfigSetParams) (*ConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatConfigSet not implemented")
}
func (UnimplementedCloudCRpcServiceServer) WechatConfigGet(context.Context, *ConfigGetParams) (*WechatConfigGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatConfigGet not implemented")
}
func (UnimplementedCloudCRpcServiceServer) WechatConfigGetAll(context.Context, *ConfigGetAllParams) (*WechatConfigGetAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatConfigGetAll not implemented")
}
func (UnimplementedCloudCRpcServiceServer) SmsConfigSet(context.Context, *SmsConfigSetParams) (*ConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsConfigSet not implemented")
}
func (UnimplementedCloudCRpcServiceServer) SmsConfigGet(context.Context, *ConfigGetParams) (*SmsConfigGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsConfigGet not implemented")
}
func (UnimplementedCloudCRpcServiceServer) SmsConfigGetAll(context.Context, *ConfigGetAllParams) (*SmsConfigGetAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsConfigGetAll not implemented")
}
func (UnimplementedCloudCRpcServiceServer) EmsConfigSet(context.Context, *EmsConfigSetParams) (*ConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmsConfigSet not implemented")
}
func (UnimplementedCloudCRpcServiceServer) EmsConfigGet(context.Context, *ConfigGetParams) (*EmsConfigGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmsConfigGet not implemented")
}
func (UnimplementedCloudCRpcServiceServer) EmsConfigGetAll(context.Context, *ConfigGetAllParams) (*EmsConfigGetAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmsConfigGetAll not implemented")
}
func (UnimplementedCloudCRpcServiceServer) OssConfigSet(context.Context, *OssConfigSetParams) (*ConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OssConfigSet not implemented")
}
func (UnimplementedCloudCRpcServiceServer) OssConfigGet(context.Context, *ConfigGetParams) (*OssConfigGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OssConfigGet not implemented")
}
func (UnimplementedCloudCRpcServiceServer) OssConfigGetAll(context.Context, *ConfigGetAllParams) (*OssConfigGetAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OssConfigGetAll not implemented")
}
func (UnimplementedCloudCRpcServiceServer) mustEmbedUnimplementedCloudCRpcServiceServer() {}

// UnsafeCloudCRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudCRpcServiceServer will
// result in compilation errors.
type UnsafeCloudCRpcServiceServer interface {
	mustEmbedUnimplementedCloudCRpcServiceServer()
}

func RegisterCloudCRpcServiceServer(s grpc.ServiceRegistrar, srv CloudCRpcServiceServer) {
	s.RegisterService(&CloudCRpcService_ServiceDesc, srv)
}

func _CloudCRpcService_SlsConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlsConfigSetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCRpcServiceServer).SlsConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCRpcService_SlsConfigSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCRpcServiceServer).SlsConfigSet(ctx, req.(*SlsConfigSetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCRpcService_SlsConfigGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCRpcServiceServer).SlsConfigGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCRpcService_SlsConfigGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCRpcServiceServer).SlsConfigGet(ctx, req.(*ConfigGetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCRpcService_SlsConfigGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetAllParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCRpcServiceServer).SlsConfigGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCRpcService_SlsConfigGetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCRpcServiceServer).SlsConfigGetAll(ctx, req.(*ConfigGetAllParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCRpcService_SystemConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemConfigSetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCRpcServiceServer).SystemConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCRpcService_SystemConfigSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCRpcServiceServer).SystemConfigSet(ctx, req.(*SystemConfigSetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCRpcService_SystemConfigGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCRpcServiceServer).SystemConfigGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCRpcService_SystemConfigGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCRpcServiceServer).SystemConfigGet(ctx, req.(*ConfigGetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCRpcService_SystemConfigGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetAllParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCRpcServiceServer).SystemConfigGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCRpcService_SystemConfigGetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCRpcServiceServer).SystemConfigGetAll(ctx, req.(*ConfigGetAllParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCRpcService_CaptchaConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptchaConfigSetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCRpcServiceServer).CaptchaConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCRpcService_CaptchaConfigSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCRpcServiceServer).CaptchaConfigSet(ctx, req.(*CaptchaConfigSetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCRpcService_CaptchaConfigGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCRpcServiceServer).CaptchaConfigGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCRpcService_CaptchaConfigGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCRpcServiceServer).CaptchaConfigGet(ctx, req.(*ConfigGetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCRpcService_CaptchaConfigGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetAllParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCRpcServiceServer).CaptchaConfigGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCRpcService_CaptchaConfigGetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCRpcServiceServer).CaptchaConfigGetAll(ctx, req.(*ConfigGetAllParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCRpcService_DouyinConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinConfigSetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCRpcServiceServer).DouyinConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCRpcService_DouyinConfigSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCRpcServiceServer).DouyinConfigSet(ctx, req.(*DouyinConfigSetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCRpcService_DouyinConfigGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCRpcServiceServer).DouyinConfigGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCRpcService_DouyinConfigGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCRpcServiceServer).DouyinConfigGet(ctx, req.(*ConfigGetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCRpcService_DouyinConfigGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetAllParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCRpcServiceServer).DouyinConfigGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCRpcService_DouyinConfigGetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCRpcServiceServer).DouyinConfigGetAll(ctx, req.(*ConfigGetAllParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCRpcService_WechatConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatConfigSetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCRpcServiceServer).WechatConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCRpcService_WechatConfigSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCRpcServiceServer).WechatConfigSet(ctx, req.(*WechatConfigSetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCRpcService_WechatConfigGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCRpcServiceServer).WechatConfigGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCRpcService_WechatConfigGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCRpcServiceServer).WechatConfigGet(ctx, req.(*ConfigGetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCRpcService_WechatConfigGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetAllParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCRpcServiceServer).WechatConfigGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCRpcService_WechatConfigGetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCRpcServiceServer).WechatConfigGetAll(ctx, req.(*ConfigGetAllParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCRpcService_SmsConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsConfigSetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCRpcServiceServer).SmsConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCRpcService_SmsConfigSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCRpcServiceServer).SmsConfigSet(ctx, req.(*SmsConfigSetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCRpcService_SmsConfigGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCRpcServiceServer).SmsConfigGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCRpcService_SmsConfigGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCRpcServiceServer).SmsConfigGet(ctx, req.(*ConfigGetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCRpcService_SmsConfigGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetAllParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCRpcServiceServer).SmsConfigGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCRpcService_SmsConfigGetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCRpcServiceServer).SmsConfigGetAll(ctx, req.(*ConfigGetAllParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCRpcService_EmsConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmsConfigSetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCRpcServiceServer).EmsConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCRpcService_EmsConfigSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCRpcServiceServer).EmsConfigSet(ctx, req.(*EmsConfigSetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCRpcService_EmsConfigGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCRpcServiceServer).EmsConfigGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCRpcService_EmsConfigGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCRpcServiceServer).EmsConfigGet(ctx, req.(*ConfigGetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCRpcService_EmsConfigGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetAllParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCRpcServiceServer).EmsConfigGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCRpcService_EmsConfigGetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCRpcServiceServer).EmsConfigGetAll(ctx, req.(*ConfigGetAllParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCRpcService_OssConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OssConfigSetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCRpcServiceServer).OssConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCRpcService_OssConfigSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCRpcServiceServer).OssConfigSet(ctx, req.(*OssConfigSetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCRpcService_OssConfigGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCRpcServiceServer).OssConfigGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCRpcService_OssConfigGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCRpcServiceServer).OssConfigGet(ctx, req.(*ConfigGetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCRpcService_OssConfigGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetAllParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCRpcServiceServer).OssConfigGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudCRpcService_OssConfigGetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCRpcServiceServer).OssConfigGetAll(ctx, req.(*ConfigGetAllParams))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudCRpcService_ServiceDesc is the grpc.ServiceDesc for CloudCRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudCRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudc.CloudCRpcService",
	HandlerType: (*CloudCRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SlsConfigSet",
			Handler:    _CloudCRpcService_SlsConfigSet_Handler,
		},
		{
			MethodName: "SlsConfigGet",
			Handler:    _CloudCRpcService_SlsConfigGet_Handler,
		},
		{
			MethodName: "SlsConfigGetAll",
			Handler:    _CloudCRpcService_SlsConfigGetAll_Handler,
		},
		{
			MethodName: "SystemConfigSet",
			Handler:    _CloudCRpcService_SystemConfigSet_Handler,
		},
		{
			MethodName: "SystemConfigGet",
			Handler:    _CloudCRpcService_SystemConfigGet_Handler,
		},
		{
			MethodName: "SystemConfigGetAll",
			Handler:    _CloudCRpcService_SystemConfigGetAll_Handler,
		},
		{
			MethodName: "CaptchaConfigSet",
			Handler:    _CloudCRpcService_CaptchaConfigSet_Handler,
		},
		{
			MethodName: "CaptchaConfigGet",
			Handler:    _CloudCRpcService_CaptchaConfigGet_Handler,
		},
		{
			MethodName: "CaptchaConfigGetAll",
			Handler:    _CloudCRpcService_CaptchaConfigGetAll_Handler,
		},
		{
			MethodName: "DouyinConfigSet",
			Handler:    _CloudCRpcService_DouyinConfigSet_Handler,
		},
		{
			MethodName: "DouyinConfigGet",
			Handler:    _CloudCRpcService_DouyinConfigGet_Handler,
		},
		{
			MethodName: "DouyinConfigGetAll",
			Handler:    _CloudCRpcService_DouyinConfigGetAll_Handler,
		},
		{
			MethodName: "WechatConfigSet",
			Handler:    _CloudCRpcService_WechatConfigSet_Handler,
		},
		{
			MethodName: "WechatConfigGet",
			Handler:    _CloudCRpcService_WechatConfigGet_Handler,
		},
		{
			MethodName: "WechatConfigGetAll",
			Handler:    _CloudCRpcService_WechatConfigGetAll_Handler,
		},
		{
			MethodName: "SmsConfigSet",
			Handler:    _CloudCRpcService_SmsConfigSet_Handler,
		},
		{
			MethodName: "SmsConfigGet",
			Handler:    _CloudCRpcService_SmsConfigGet_Handler,
		},
		{
			MethodName: "SmsConfigGetAll",
			Handler:    _CloudCRpcService_SmsConfigGetAll_Handler,
		},
		{
			MethodName: "EmsConfigSet",
			Handler:    _CloudCRpcService_EmsConfigSet_Handler,
		},
		{
			MethodName: "EmsConfigGet",
			Handler:    _CloudCRpcService_EmsConfigGet_Handler,
		},
		{
			MethodName: "EmsConfigGetAll",
			Handler:    _CloudCRpcService_EmsConfigGetAll_Handler,
		},
		{
			MethodName: "OssConfigSet",
			Handler:    _CloudCRpcService_OssConfigSet_Handler,
		},
		{
			MethodName: "OssConfigGet",
			Handler:    _CloudCRpcService_OssConfigGet_Handler,
		},
		{
			MethodName: "OssConfigGetAll",
			Handler:    _CloudCRpcService_OssConfigGetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudc.proto",
}
