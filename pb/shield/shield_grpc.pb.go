// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: shield.proto

package shield

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShieldRpcService_Ping_FullMethodName             = "/shield.ShieldRpcService/Ping"
	ShieldRpcService_AuthLoginWithApi_FullMethodName = "/shield.ShieldRpcService/AuthLoginWithApi"
	ShieldRpcService_RefreshToken_FullMethodName     = "/shield.ShieldRpcService/RefreshToken"
)

// ShieldRpcServiceClient is the client API for ShieldRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShieldRpcServiceClient interface {
	// note: ping服务 必要存在
	Ping(ctx context.Context, in *PingParams, opts ...grpc.CallOption) (*PingResp, error)
	// note: 通过API方式登录, 必要存在
	AuthLoginWithApi(ctx context.Context, in *AuthApiParams, opts ...grpc.CallOption) (*AuthApiResp, error)
	// note: 刷token, 必要存在
	RefreshToken(ctx context.Context, in *RefreshTokenParams, opts ...grpc.CallOption) (*RefreshTokenResp, error)
}

type shieldRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShieldRpcServiceClient(cc grpc.ClientConnInterface) ShieldRpcServiceClient {
	return &shieldRpcServiceClient{cc}
}

func (c *shieldRpcServiceClient) Ping(ctx context.Context, in *PingParams, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := c.cc.Invoke(ctx, ShieldRpcService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldRpcServiceClient) AuthLoginWithApi(ctx context.Context, in *AuthApiParams, opts ...grpc.CallOption) (*AuthApiResp, error) {
	out := new(AuthApiResp)
	err := c.cc.Invoke(ctx, ShieldRpcService_AuthLoginWithApi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldRpcServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenParams, opts ...grpc.CallOption) (*RefreshTokenResp, error) {
	out := new(RefreshTokenResp)
	err := c.cc.Invoke(ctx, ShieldRpcService_RefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShieldRpcServiceServer is the server API for ShieldRpcService service.
// All implementations must embed UnimplementedShieldRpcServiceServer
// for forward compatibility
type ShieldRpcServiceServer interface {
	// note: ping服务 必要存在
	Ping(context.Context, *PingParams) (*PingResp, error)
	// note: 通过API方式登录, 必要存在
	AuthLoginWithApi(context.Context, *AuthApiParams) (*AuthApiResp, error)
	// note: 刷token, 必要存在
	RefreshToken(context.Context, *RefreshTokenParams) (*RefreshTokenResp, error)
	mustEmbedUnimplementedShieldRpcServiceServer()
}

// UnimplementedShieldRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShieldRpcServiceServer struct {
}

func (UnimplementedShieldRpcServiceServer) Ping(context.Context, *PingParams) (*PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedShieldRpcServiceServer) AuthLoginWithApi(context.Context, *AuthApiParams) (*AuthApiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthLoginWithApi not implemented")
}
func (UnimplementedShieldRpcServiceServer) RefreshToken(context.Context, *RefreshTokenParams) (*RefreshTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedShieldRpcServiceServer) mustEmbedUnimplementedShieldRpcServiceServer() {}

// UnsafeShieldRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShieldRpcServiceServer will
// result in compilation errors.
type UnsafeShieldRpcServiceServer interface {
	mustEmbedUnimplementedShieldRpcServiceServer()
}

func RegisterShieldRpcServiceServer(s grpc.ServiceRegistrar, srv ShieldRpcServiceServer) {
	s.RegisterService(&ShieldRpcService_ServiceDesc, srv)
}

func _ShieldRpcService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldRpcServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldRpcService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldRpcServiceServer).Ping(ctx, req.(*PingParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldRpcService_AuthLoginWithApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthApiParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldRpcServiceServer).AuthLoginWithApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldRpcService_AuthLoginWithApi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldRpcServiceServer).AuthLoginWithApi(ctx, req.(*AuthApiParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldRpcService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldRpcServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldRpcService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldRpcServiceServer).RefreshToken(ctx, req.(*RefreshTokenParams))
	}
	return interceptor(ctx, in, info, handler)
}

// ShieldRpcService_ServiceDesc is the grpc.ServiceDesc for ShieldRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShieldRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shield.ShieldRpcService",
	HandlerType: (*ShieldRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ShieldRpcService_Ping_Handler,
		},
		{
			MethodName: "AuthLoginWithApi",
			Handler:    _ShieldRpcService_AuthLoginWithApi_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _ShieldRpcService_RefreshToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shield.proto",
}
