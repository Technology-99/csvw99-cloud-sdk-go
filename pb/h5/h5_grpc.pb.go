// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: h5.proto

package h5

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	H5RpcService_LabelCreate_FullMethodName                = "/h5.H5RpcService/LabelCreate"
	H5RpcService_LabelUpdate_FullMethodName                = "/h5.H5RpcService/LabelUpdate"
	H5RpcService_LabelDelete_FullMethodName                = "/h5.H5RpcService/LabelDelete"
	H5RpcService_LabelDeleteIds_FullMethodName             = "/h5.H5RpcService/LabelDeleteIds"
	H5RpcService_LabelQuery_FullMethodName                 = "/h5.H5RpcService/LabelQuery"
	H5RpcService_LabelQueryList_FullMethodName             = "/h5.H5RpcService/LabelQueryList"
	H5RpcService_LabelUpdateStatus_FullMethodName          = "/h5.H5RpcService/LabelUpdateStatus"
	H5RpcService_MiniSiteUserCreate_FullMethodName         = "/h5.H5RpcService/MiniSiteUserCreate"
	H5RpcService_MiniSiteUserUpdate_FullMethodName         = "/h5.H5RpcService/MiniSiteUserUpdate"
	H5RpcService_MiniSiteUserDelete_FullMethodName         = "/h5.H5RpcService/MiniSiteUserDelete"
	H5RpcService_MiniSiteUserDeleteIds_FullMethodName      = "/h5.H5RpcService/MiniSiteUserDeleteIds"
	H5RpcService_MiniSiteUserQuery_FullMethodName          = "/h5.H5RpcService/MiniSiteUserQuery"
	H5RpcService_MiniSiteUserQueryList_FullMethodName      = "/h5.H5RpcService/MiniSiteUserQueryList"
	H5RpcService_MiniSiteUserUpdateStatus_FullMethodName   = "/h5.H5RpcService/MiniSiteUserUpdateStatus"
	H5RpcService_ArticleCreate_FullMethodName              = "/h5.H5RpcService/ArticleCreate"
	H5RpcService_ArticleUpdate_FullMethodName              = "/h5.H5RpcService/ArticleUpdate"
	H5RpcService_ArticleDelete_FullMethodName              = "/h5.H5RpcService/ArticleDelete"
	H5RpcService_ArticleDeleteIds_FullMethodName           = "/h5.H5RpcService/ArticleDeleteIds"
	H5RpcService_ArticleQuery_FullMethodName               = "/h5.H5RpcService/ArticleQuery"
	H5RpcService_ArticleQueryListQueryIds_FullMethodName   = "/h5.H5RpcService/ArticleQueryListQueryIds"
	H5RpcService_ArticleQueryList_FullMethodName           = "/h5.H5RpcService/ArticleQueryList"
	H5RpcService_ArticleQueryRecommendList_FullMethodName  = "/h5.H5RpcService/ArticleQueryRecommendList"
	H5RpcService_ArticleUpdateStatus_FullMethodName        = "/h5.H5RpcService/ArticleUpdateStatus"
	H5RpcService_ArticleBindArticleLabels_FullMethodName   = "/h5.H5RpcService/ArticleBindArticleLabels"
	H5RpcService_ArticleUnBindArticleLabels_FullMethodName = "/h5.H5RpcService/ArticleUnBindArticleLabels"
	H5RpcService_RelatedSitesCreate_FullMethodName         = "/h5.H5RpcService/RelatedSitesCreate"
	H5RpcService_RelatedSitesUpdate_FullMethodName         = "/h5.H5RpcService/RelatedSitesUpdate"
	H5RpcService_RelatedSitesDelete_FullMethodName         = "/h5.H5RpcService/RelatedSitesDelete"
	H5RpcService_RelatedSitesDeleteIds_FullMethodName      = "/h5.H5RpcService/RelatedSitesDeleteIds"
	H5RpcService_RelatedSitesQuery_FullMethodName          = "/h5.H5RpcService/RelatedSitesQuery"
	H5RpcService_RelatedSitesQueryIds_FullMethodName       = "/h5.H5RpcService/RelatedSitesQueryIds"
	H5RpcService_RelatedSitesQueryList_FullMethodName      = "/h5.H5RpcService/RelatedSitesQueryList"
	H5RpcService_AttachmentCreate_FullMethodName           = "/h5.H5RpcService/AttachmentCreate"
	H5RpcService_AttachmentUpdate_FullMethodName           = "/h5.H5RpcService/AttachmentUpdate"
	H5RpcService_AttachmentDelete_FullMethodName           = "/h5.H5RpcService/AttachmentDelete"
	H5RpcService_AttachmentDeleteIds_FullMethodName        = "/h5.H5RpcService/AttachmentDeleteIds"
	H5RpcService_AttachmentQuery_FullMethodName            = "/h5.H5RpcService/AttachmentQuery"
	H5RpcService_AttachmentQueryList_FullMethodName        = "/h5.H5RpcService/AttachmentQueryList"
	H5RpcService_AttaFileCreate_FullMethodName             = "/h5.H5RpcService/AttaFileCreate"
	H5RpcService_AttaFileDelete_FullMethodName             = "/h5.H5RpcService/AttaFileDelete"
	H5RpcService_AttaFileDeleteIds_FullMethodName          = "/h5.H5RpcService/AttaFileDeleteIds"
	H5RpcService_AttaFileQuery_FullMethodName              = "/h5.H5RpcService/AttaFileQuery"
	H5RpcService_AttaFileQueryList_FullMethodName          = "/h5.H5RpcService/AttaFileQueryList"
)

// H5RpcServiceClient is the client API for H5RpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type H5RpcServiceClient interface {
	// note: 标签专区
	LabelCreate(ctx context.Context, in *CreateLabelReq, opts ...grpc.CallOption) (*CreateLabelResp, error)
	LabelUpdate(ctx context.Context, in *UpdateLabelReq, opts ...grpc.CallOption) (*Response, error)
	LabelDelete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Response, error)
	LabelDeleteIds(ctx context.Context, in *DeleteIdsReq, opts ...grpc.CallOption) (*Response, error)
	LabelQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryLabelResp, error)
	LabelQueryList(ctx context.Context, in *QueryLabelListReq, opts ...grpc.CallOption) (*QueryLabelListResp, error)
	LabelUpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*Response, error)
	// note: minisite用户专区
	MiniSiteUserCreate(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateResponse, error)
	MiniSiteUserUpdate(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*Response, error)
	MiniSiteUserDelete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Response, error)
	MiniSiteUserDeleteIds(ctx context.Context, in *DeleteIdsReq, opts ...grpc.CallOption) (*Response, error)
	MiniSiteUserQuery(ctx context.Context, in *QueryUserReq, opts ...grpc.CallOption) (*QueryUserResp, error)
	MiniSiteUserQueryList(ctx context.Context, in *QueryUserListReq, opts ...grpc.CallOption) (*QueryUserListResp, error)
	MiniSiteUserUpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*Response, error)
	// note: 软文专区
	ArticleCreate(ctx context.Context, in *CreateArticleReq, opts ...grpc.CallOption) (*CreateArticleResp, error)
	ArticleUpdate(ctx context.Context, in *UpdateArticleReq, opts ...grpc.CallOption) (*Response, error)
	ArticleDelete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Response, error)
	ArticleDeleteIds(ctx context.Context, in *DeleteIdsReq, opts ...grpc.CallOption) (*Response, error)
	ArticleQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryArticleResp, error)
	ArticleQueryListQueryIds(ctx context.Context, in *QueryIdsReq, opts ...grpc.CallOption) (*QueryArticleListResp, error)
	ArticleQueryList(ctx context.Context, in *QueryArticleListReq, opts ...grpc.CallOption) (*QueryArticleListResp, error)
	ArticleQueryRecommendList(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryRecommendListResp, error)
	ArticleUpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*Response, error)
	ArticleBindArticleLabels(ctx context.Context, in *UpdateBindLabelsReq, opts ...grpc.CallOption) (*Response, error)
	ArticleUnBindArticleLabels(ctx context.Context, in *UpdateBindLabelsReq, opts ...grpc.CallOption) (*Response, error)
	// note: 相关站点
	RelatedSitesCreate(ctx context.Context, in *CreateRelatedSitesReq, opts ...grpc.CallOption) (*CreateResponse, error)
	RelatedSitesUpdate(ctx context.Context, in *UpdateRelatedSitesReq, opts ...grpc.CallOption) (*Response, error)
	RelatedSitesDelete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Response, error)
	RelatedSitesDeleteIds(ctx context.Context, in *DeleteIdsReq, opts ...grpc.CallOption) (*Response, error)
	RelatedSitesQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryRelatedSitesResp, error)
	RelatedSitesQueryIds(ctx context.Context, in *QueryIdsReq, opts ...grpc.CallOption) (*QueryRelatedSitesListResp, error)
	RelatedSitesQueryList(ctx context.Context, in *QueryRelatedSitesListReq, opts ...grpc.CallOption) (*QueryRelatedSitesListResp, error)
	// note: 附件模块
	AttachmentCreate(ctx context.Context, in *CreateAttachmentReq, opts ...grpc.CallOption) (*CreateResponse, error)
	AttachmentUpdate(ctx context.Context, in *UpdateAttachmentReq, opts ...grpc.CallOption) (*Response, error)
	AttachmentDelete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Response, error)
	AttachmentDeleteIds(ctx context.Context, in *DeleteIdsReq, opts ...grpc.CallOption) (*Response, error)
	AttachmentQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryAttachmentResp, error)
	AttachmentQueryList(ctx context.Context, in *QueryAttachmentListReq, opts ...grpc.CallOption) (*QueryAttachmentListResp, error)
	AttaFileCreate(ctx context.Context, in *CreateAttaFileReq, opts ...grpc.CallOption) (*CreateResponse, error)
	AttaFileDelete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Response, error)
	AttaFileDeleteIds(ctx context.Context, in *DeleteIdsReq, opts ...grpc.CallOption) (*Response, error)
	AttaFileQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryAttaFileResp, error)
	AttaFileQueryList(ctx context.Context, in *QueryAttaFileListReq, opts ...grpc.CallOption) (*QueryAttaFileListResp, error)
}

type h5RpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewH5RpcServiceClient(cc grpc.ClientConnInterface) H5RpcServiceClient {
	return &h5RpcServiceClient{cc}
}

func (c *h5RpcServiceClient) LabelCreate(ctx context.Context, in *CreateLabelReq, opts ...grpc.CallOption) (*CreateLabelResp, error) {
	out := new(CreateLabelResp)
	err := c.cc.Invoke(ctx, H5RpcService_LabelCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) LabelUpdate(ctx context.Context, in *UpdateLabelReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, H5RpcService_LabelUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) LabelDelete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, H5RpcService_LabelDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) LabelDeleteIds(ctx context.Context, in *DeleteIdsReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, H5RpcService_LabelDeleteIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) LabelQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryLabelResp, error) {
	out := new(QueryLabelResp)
	err := c.cc.Invoke(ctx, H5RpcService_LabelQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) LabelQueryList(ctx context.Context, in *QueryLabelListReq, opts ...grpc.CallOption) (*QueryLabelListResp, error) {
	out := new(QueryLabelListResp)
	err := c.cc.Invoke(ctx, H5RpcService_LabelQueryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) LabelUpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, H5RpcService_LabelUpdateStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) MiniSiteUserCreate(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, H5RpcService_MiniSiteUserCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) MiniSiteUserUpdate(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, H5RpcService_MiniSiteUserUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) MiniSiteUserDelete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, H5RpcService_MiniSiteUserDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) MiniSiteUserDeleteIds(ctx context.Context, in *DeleteIdsReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, H5RpcService_MiniSiteUserDeleteIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) MiniSiteUserQuery(ctx context.Context, in *QueryUserReq, opts ...grpc.CallOption) (*QueryUserResp, error) {
	out := new(QueryUserResp)
	err := c.cc.Invoke(ctx, H5RpcService_MiniSiteUserQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) MiniSiteUserQueryList(ctx context.Context, in *QueryUserListReq, opts ...grpc.CallOption) (*QueryUserListResp, error) {
	out := new(QueryUserListResp)
	err := c.cc.Invoke(ctx, H5RpcService_MiniSiteUserQueryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) MiniSiteUserUpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, H5RpcService_MiniSiteUserUpdateStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) ArticleCreate(ctx context.Context, in *CreateArticleReq, opts ...grpc.CallOption) (*CreateArticleResp, error) {
	out := new(CreateArticleResp)
	err := c.cc.Invoke(ctx, H5RpcService_ArticleCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) ArticleUpdate(ctx context.Context, in *UpdateArticleReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, H5RpcService_ArticleUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) ArticleDelete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, H5RpcService_ArticleDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) ArticleDeleteIds(ctx context.Context, in *DeleteIdsReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, H5RpcService_ArticleDeleteIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) ArticleQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryArticleResp, error) {
	out := new(QueryArticleResp)
	err := c.cc.Invoke(ctx, H5RpcService_ArticleQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) ArticleQueryListQueryIds(ctx context.Context, in *QueryIdsReq, opts ...grpc.CallOption) (*QueryArticleListResp, error) {
	out := new(QueryArticleListResp)
	err := c.cc.Invoke(ctx, H5RpcService_ArticleQueryListQueryIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) ArticleQueryList(ctx context.Context, in *QueryArticleListReq, opts ...grpc.CallOption) (*QueryArticleListResp, error) {
	out := new(QueryArticleListResp)
	err := c.cc.Invoke(ctx, H5RpcService_ArticleQueryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) ArticleQueryRecommendList(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryRecommendListResp, error) {
	out := new(QueryRecommendListResp)
	err := c.cc.Invoke(ctx, H5RpcService_ArticleQueryRecommendList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) ArticleUpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, H5RpcService_ArticleUpdateStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) ArticleBindArticleLabels(ctx context.Context, in *UpdateBindLabelsReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, H5RpcService_ArticleBindArticleLabels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) ArticleUnBindArticleLabels(ctx context.Context, in *UpdateBindLabelsReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, H5RpcService_ArticleUnBindArticleLabels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) RelatedSitesCreate(ctx context.Context, in *CreateRelatedSitesReq, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, H5RpcService_RelatedSitesCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) RelatedSitesUpdate(ctx context.Context, in *UpdateRelatedSitesReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, H5RpcService_RelatedSitesUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) RelatedSitesDelete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, H5RpcService_RelatedSitesDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) RelatedSitesDeleteIds(ctx context.Context, in *DeleteIdsReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, H5RpcService_RelatedSitesDeleteIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) RelatedSitesQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryRelatedSitesResp, error) {
	out := new(QueryRelatedSitesResp)
	err := c.cc.Invoke(ctx, H5RpcService_RelatedSitesQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) RelatedSitesQueryIds(ctx context.Context, in *QueryIdsReq, opts ...grpc.CallOption) (*QueryRelatedSitesListResp, error) {
	out := new(QueryRelatedSitesListResp)
	err := c.cc.Invoke(ctx, H5RpcService_RelatedSitesQueryIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) RelatedSitesQueryList(ctx context.Context, in *QueryRelatedSitesListReq, opts ...grpc.CallOption) (*QueryRelatedSitesListResp, error) {
	out := new(QueryRelatedSitesListResp)
	err := c.cc.Invoke(ctx, H5RpcService_RelatedSitesQueryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) AttachmentCreate(ctx context.Context, in *CreateAttachmentReq, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, H5RpcService_AttachmentCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) AttachmentUpdate(ctx context.Context, in *UpdateAttachmentReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, H5RpcService_AttachmentUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) AttachmentDelete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, H5RpcService_AttachmentDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) AttachmentDeleteIds(ctx context.Context, in *DeleteIdsReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, H5RpcService_AttachmentDeleteIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) AttachmentQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryAttachmentResp, error) {
	out := new(QueryAttachmentResp)
	err := c.cc.Invoke(ctx, H5RpcService_AttachmentQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) AttachmentQueryList(ctx context.Context, in *QueryAttachmentListReq, opts ...grpc.CallOption) (*QueryAttachmentListResp, error) {
	out := new(QueryAttachmentListResp)
	err := c.cc.Invoke(ctx, H5RpcService_AttachmentQueryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) AttaFileCreate(ctx context.Context, in *CreateAttaFileReq, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, H5RpcService_AttaFileCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) AttaFileDelete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, H5RpcService_AttaFileDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) AttaFileDeleteIds(ctx context.Context, in *DeleteIdsReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, H5RpcService_AttaFileDeleteIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) AttaFileQuery(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryAttaFileResp, error) {
	out := new(QueryAttaFileResp)
	err := c.cc.Invoke(ctx, H5RpcService_AttaFileQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *h5RpcServiceClient) AttaFileQueryList(ctx context.Context, in *QueryAttaFileListReq, opts ...grpc.CallOption) (*QueryAttaFileListResp, error) {
	out := new(QueryAttaFileListResp)
	err := c.cc.Invoke(ctx, H5RpcService_AttaFileQueryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// H5RpcServiceServer is the server API for H5RpcService service.
// All implementations must embed UnimplementedH5RpcServiceServer
// for forward compatibility
type H5RpcServiceServer interface {
	// note: 标签专区
	LabelCreate(context.Context, *CreateLabelReq) (*CreateLabelResp, error)
	LabelUpdate(context.Context, *UpdateLabelReq) (*Response, error)
	LabelDelete(context.Context, *DeleteReq) (*Response, error)
	LabelDeleteIds(context.Context, *DeleteIdsReq) (*Response, error)
	LabelQuery(context.Context, *QueryReq) (*QueryLabelResp, error)
	LabelQueryList(context.Context, *QueryLabelListReq) (*QueryLabelListResp, error)
	LabelUpdateStatus(context.Context, *UpdateStatusReq) (*Response, error)
	// note: minisite用户专区
	MiniSiteUserCreate(context.Context, *CreateUserReq) (*CreateResponse, error)
	MiniSiteUserUpdate(context.Context, *UpdateUserReq) (*Response, error)
	MiniSiteUserDelete(context.Context, *DeleteReq) (*Response, error)
	MiniSiteUserDeleteIds(context.Context, *DeleteIdsReq) (*Response, error)
	MiniSiteUserQuery(context.Context, *QueryUserReq) (*QueryUserResp, error)
	MiniSiteUserQueryList(context.Context, *QueryUserListReq) (*QueryUserListResp, error)
	MiniSiteUserUpdateStatus(context.Context, *UpdateStatusReq) (*Response, error)
	// note: 软文专区
	ArticleCreate(context.Context, *CreateArticleReq) (*CreateArticleResp, error)
	ArticleUpdate(context.Context, *UpdateArticleReq) (*Response, error)
	ArticleDelete(context.Context, *DeleteReq) (*Response, error)
	ArticleDeleteIds(context.Context, *DeleteIdsReq) (*Response, error)
	ArticleQuery(context.Context, *QueryReq) (*QueryArticleResp, error)
	ArticleQueryListQueryIds(context.Context, *QueryIdsReq) (*QueryArticleListResp, error)
	ArticleQueryList(context.Context, *QueryArticleListReq) (*QueryArticleListResp, error)
	ArticleQueryRecommendList(context.Context, *QueryReq) (*QueryRecommendListResp, error)
	ArticleUpdateStatus(context.Context, *UpdateStatusReq) (*Response, error)
	ArticleBindArticleLabels(context.Context, *UpdateBindLabelsReq) (*Response, error)
	ArticleUnBindArticleLabels(context.Context, *UpdateBindLabelsReq) (*Response, error)
	// note: 相关站点
	RelatedSitesCreate(context.Context, *CreateRelatedSitesReq) (*CreateResponse, error)
	RelatedSitesUpdate(context.Context, *UpdateRelatedSitesReq) (*Response, error)
	RelatedSitesDelete(context.Context, *DeleteReq) (*Response, error)
	RelatedSitesDeleteIds(context.Context, *DeleteIdsReq) (*Response, error)
	RelatedSitesQuery(context.Context, *QueryReq) (*QueryRelatedSitesResp, error)
	RelatedSitesQueryIds(context.Context, *QueryIdsReq) (*QueryRelatedSitesListResp, error)
	RelatedSitesQueryList(context.Context, *QueryRelatedSitesListReq) (*QueryRelatedSitesListResp, error)
	// note: 附件模块
	AttachmentCreate(context.Context, *CreateAttachmentReq) (*CreateResponse, error)
	AttachmentUpdate(context.Context, *UpdateAttachmentReq) (*Response, error)
	AttachmentDelete(context.Context, *DeleteReq) (*Response, error)
	AttachmentDeleteIds(context.Context, *DeleteIdsReq) (*Response, error)
	AttachmentQuery(context.Context, *QueryReq) (*QueryAttachmentResp, error)
	AttachmentQueryList(context.Context, *QueryAttachmentListReq) (*QueryAttachmentListResp, error)
	AttaFileCreate(context.Context, *CreateAttaFileReq) (*CreateResponse, error)
	AttaFileDelete(context.Context, *DeleteReq) (*Response, error)
	AttaFileDeleteIds(context.Context, *DeleteIdsReq) (*Response, error)
	AttaFileQuery(context.Context, *QueryReq) (*QueryAttaFileResp, error)
	AttaFileQueryList(context.Context, *QueryAttaFileListReq) (*QueryAttaFileListResp, error)
	mustEmbedUnimplementedH5RpcServiceServer()
}

// UnimplementedH5RpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedH5RpcServiceServer struct {
}

func (UnimplementedH5RpcServiceServer) LabelCreate(context.Context, *CreateLabelReq) (*CreateLabelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelCreate not implemented")
}
func (UnimplementedH5RpcServiceServer) LabelUpdate(context.Context, *UpdateLabelReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelUpdate not implemented")
}
func (UnimplementedH5RpcServiceServer) LabelDelete(context.Context, *DeleteReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelDelete not implemented")
}
func (UnimplementedH5RpcServiceServer) LabelDeleteIds(context.Context, *DeleteIdsReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelDeleteIds not implemented")
}
func (UnimplementedH5RpcServiceServer) LabelQuery(context.Context, *QueryReq) (*QueryLabelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelQuery not implemented")
}
func (UnimplementedH5RpcServiceServer) LabelQueryList(context.Context, *QueryLabelListReq) (*QueryLabelListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelQueryList not implemented")
}
func (UnimplementedH5RpcServiceServer) LabelUpdateStatus(context.Context, *UpdateStatusReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LabelUpdateStatus not implemented")
}
func (UnimplementedH5RpcServiceServer) MiniSiteUserCreate(context.Context, *CreateUserReq) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MiniSiteUserCreate not implemented")
}
func (UnimplementedH5RpcServiceServer) MiniSiteUserUpdate(context.Context, *UpdateUserReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MiniSiteUserUpdate not implemented")
}
func (UnimplementedH5RpcServiceServer) MiniSiteUserDelete(context.Context, *DeleteReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MiniSiteUserDelete not implemented")
}
func (UnimplementedH5RpcServiceServer) MiniSiteUserDeleteIds(context.Context, *DeleteIdsReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MiniSiteUserDeleteIds not implemented")
}
func (UnimplementedH5RpcServiceServer) MiniSiteUserQuery(context.Context, *QueryUserReq) (*QueryUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MiniSiteUserQuery not implemented")
}
func (UnimplementedH5RpcServiceServer) MiniSiteUserQueryList(context.Context, *QueryUserListReq) (*QueryUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MiniSiteUserQueryList not implemented")
}
func (UnimplementedH5RpcServiceServer) MiniSiteUserUpdateStatus(context.Context, *UpdateStatusReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MiniSiteUserUpdateStatus not implemented")
}
func (UnimplementedH5RpcServiceServer) ArticleCreate(context.Context, *CreateArticleReq) (*CreateArticleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleCreate not implemented")
}
func (UnimplementedH5RpcServiceServer) ArticleUpdate(context.Context, *UpdateArticleReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleUpdate not implemented")
}
func (UnimplementedH5RpcServiceServer) ArticleDelete(context.Context, *DeleteReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleDelete not implemented")
}
func (UnimplementedH5RpcServiceServer) ArticleDeleteIds(context.Context, *DeleteIdsReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleDeleteIds not implemented")
}
func (UnimplementedH5RpcServiceServer) ArticleQuery(context.Context, *QueryReq) (*QueryArticleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleQuery not implemented")
}
func (UnimplementedH5RpcServiceServer) ArticleQueryListQueryIds(context.Context, *QueryIdsReq) (*QueryArticleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleQueryListQueryIds not implemented")
}
func (UnimplementedH5RpcServiceServer) ArticleQueryList(context.Context, *QueryArticleListReq) (*QueryArticleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleQueryList not implemented")
}
func (UnimplementedH5RpcServiceServer) ArticleQueryRecommendList(context.Context, *QueryReq) (*QueryRecommendListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleQueryRecommendList not implemented")
}
func (UnimplementedH5RpcServiceServer) ArticleUpdateStatus(context.Context, *UpdateStatusReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleUpdateStatus not implemented")
}
func (UnimplementedH5RpcServiceServer) ArticleBindArticleLabels(context.Context, *UpdateBindLabelsReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleBindArticleLabels not implemented")
}
func (UnimplementedH5RpcServiceServer) ArticleUnBindArticleLabels(context.Context, *UpdateBindLabelsReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleUnBindArticleLabels not implemented")
}
func (UnimplementedH5RpcServiceServer) RelatedSitesCreate(context.Context, *CreateRelatedSitesReq) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelatedSitesCreate not implemented")
}
func (UnimplementedH5RpcServiceServer) RelatedSitesUpdate(context.Context, *UpdateRelatedSitesReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelatedSitesUpdate not implemented")
}
func (UnimplementedH5RpcServiceServer) RelatedSitesDelete(context.Context, *DeleteReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelatedSitesDelete not implemented")
}
func (UnimplementedH5RpcServiceServer) RelatedSitesDeleteIds(context.Context, *DeleteIdsReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelatedSitesDeleteIds not implemented")
}
func (UnimplementedH5RpcServiceServer) RelatedSitesQuery(context.Context, *QueryReq) (*QueryRelatedSitesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelatedSitesQuery not implemented")
}
func (UnimplementedH5RpcServiceServer) RelatedSitesQueryIds(context.Context, *QueryIdsReq) (*QueryRelatedSitesListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelatedSitesQueryIds not implemented")
}
func (UnimplementedH5RpcServiceServer) RelatedSitesQueryList(context.Context, *QueryRelatedSitesListReq) (*QueryRelatedSitesListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelatedSitesQueryList not implemented")
}
func (UnimplementedH5RpcServiceServer) AttachmentCreate(context.Context, *CreateAttachmentReq) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachmentCreate not implemented")
}
func (UnimplementedH5RpcServiceServer) AttachmentUpdate(context.Context, *UpdateAttachmentReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachmentUpdate not implemented")
}
func (UnimplementedH5RpcServiceServer) AttachmentDelete(context.Context, *DeleteReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachmentDelete not implemented")
}
func (UnimplementedH5RpcServiceServer) AttachmentDeleteIds(context.Context, *DeleteIdsReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachmentDeleteIds not implemented")
}
func (UnimplementedH5RpcServiceServer) AttachmentQuery(context.Context, *QueryReq) (*QueryAttachmentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachmentQuery not implemented")
}
func (UnimplementedH5RpcServiceServer) AttachmentQueryList(context.Context, *QueryAttachmentListReq) (*QueryAttachmentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachmentQueryList not implemented")
}
func (UnimplementedH5RpcServiceServer) AttaFileCreate(context.Context, *CreateAttaFileReq) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttaFileCreate not implemented")
}
func (UnimplementedH5RpcServiceServer) AttaFileDelete(context.Context, *DeleteReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttaFileDelete not implemented")
}
func (UnimplementedH5RpcServiceServer) AttaFileDeleteIds(context.Context, *DeleteIdsReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttaFileDeleteIds not implemented")
}
func (UnimplementedH5RpcServiceServer) AttaFileQuery(context.Context, *QueryReq) (*QueryAttaFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttaFileQuery not implemented")
}
func (UnimplementedH5RpcServiceServer) AttaFileQueryList(context.Context, *QueryAttaFileListReq) (*QueryAttaFileListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttaFileQueryList not implemented")
}
func (UnimplementedH5RpcServiceServer) mustEmbedUnimplementedH5RpcServiceServer() {}

// UnsafeH5RpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to H5RpcServiceServer will
// result in compilation errors.
type UnsafeH5RpcServiceServer interface {
	mustEmbedUnimplementedH5RpcServiceServer()
}

func RegisterH5RpcServiceServer(s grpc.ServiceRegistrar, srv H5RpcServiceServer) {
	s.RegisterService(&H5RpcService_ServiceDesc, srv)
}

func _H5RpcService_LabelCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).LabelCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_LabelCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).LabelCreate(ctx, req.(*CreateLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_LabelUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).LabelUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_LabelUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).LabelUpdate(ctx, req.(*UpdateLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_LabelDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).LabelDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_LabelDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).LabelDelete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_LabelDeleteIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).LabelDeleteIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_LabelDeleteIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).LabelDeleteIds(ctx, req.(*DeleteIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_LabelQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).LabelQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_LabelQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).LabelQuery(ctx, req.(*QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_LabelQueryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLabelListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).LabelQueryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_LabelQueryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).LabelQueryList(ctx, req.(*QueryLabelListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_LabelUpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).LabelUpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_LabelUpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).LabelUpdateStatus(ctx, req.(*UpdateStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_MiniSiteUserCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).MiniSiteUserCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_MiniSiteUserCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).MiniSiteUserCreate(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_MiniSiteUserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).MiniSiteUserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_MiniSiteUserUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).MiniSiteUserUpdate(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_MiniSiteUserDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).MiniSiteUserDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_MiniSiteUserDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).MiniSiteUserDelete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_MiniSiteUserDeleteIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).MiniSiteUserDeleteIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_MiniSiteUserDeleteIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).MiniSiteUserDeleteIds(ctx, req.(*DeleteIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_MiniSiteUserQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).MiniSiteUserQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_MiniSiteUserQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).MiniSiteUserQuery(ctx, req.(*QueryUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_MiniSiteUserQueryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).MiniSiteUserQueryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_MiniSiteUserQueryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).MiniSiteUserQueryList(ctx, req.(*QueryUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_MiniSiteUserUpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).MiniSiteUserUpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_MiniSiteUserUpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).MiniSiteUserUpdateStatus(ctx, req.(*UpdateStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_ArticleCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).ArticleCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_ArticleCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).ArticleCreate(ctx, req.(*CreateArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_ArticleUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).ArticleUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_ArticleUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).ArticleUpdate(ctx, req.(*UpdateArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_ArticleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).ArticleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_ArticleDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).ArticleDelete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_ArticleDeleteIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).ArticleDeleteIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_ArticleDeleteIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).ArticleDeleteIds(ctx, req.(*DeleteIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_ArticleQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).ArticleQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_ArticleQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).ArticleQuery(ctx, req.(*QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_ArticleQueryListQueryIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).ArticleQueryListQueryIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_ArticleQueryListQueryIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).ArticleQueryListQueryIds(ctx, req.(*QueryIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_ArticleQueryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryArticleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).ArticleQueryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_ArticleQueryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).ArticleQueryList(ctx, req.(*QueryArticleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_ArticleQueryRecommendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).ArticleQueryRecommendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_ArticleQueryRecommendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).ArticleQueryRecommendList(ctx, req.(*QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_ArticleUpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).ArticleUpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_ArticleUpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).ArticleUpdateStatus(ctx, req.(*UpdateStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_ArticleBindArticleLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBindLabelsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).ArticleBindArticleLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_ArticleBindArticleLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).ArticleBindArticleLabels(ctx, req.(*UpdateBindLabelsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_ArticleUnBindArticleLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBindLabelsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).ArticleUnBindArticleLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_ArticleUnBindArticleLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).ArticleUnBindArticleLabels(ctx, req.(*UpdateBindLabelsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_RelatedSitesCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRelatedSitesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).RelatedSitesCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_RelatedSitesCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).RelatedSitesCreate(ctx, req.(*CreateRelatedSitesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_RelatedSitesUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRelatedSitesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).RelatedSitesUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_RelatedSitesUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).RelatedSitesUpdate(ctx, req.(*UpdateRelatedSitesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_RelatedSitesDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).RelatedSitesDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_RelatedSitesDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).RelatedSitesDelete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_RelatedSitesDeleteIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).RelatedSitesDeleteIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_RelatedSitesDeleteIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).RelatedSitesDeleteIds(ctx, req.(*DeleteIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_RelatedSitesQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).RelatedSitesQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_RelatedSitesQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).RelatedSitesQuery(ctx, req.(*QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_RelatedSitesQueryIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).RelatedSitesQueryIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_RelatedSitesQueryIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).RelatedSitesQueryIds(ctx, req.(*QueryIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_RelatedSitesQueryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRelatedSitesListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).RelatedSitesQueryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_RelatedSitesQueryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).RelatedSitesQueryList(ctx, req.(*QueryRelatedSitesListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_AttachmentCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttachmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).AttachmentCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_AttachmentCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).AttachmentCreate(ctx, req.(*CreateAttachmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_AttachmentUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttachmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).AttachmentUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_AttachmentUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).AttachmentUpdate(ctx, req.(*UpdateAttachmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_AttachmentDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).AttachmentDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_AttachmentDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).AttachmentDelete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_AttachmentDeleteIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).AttachmentDeleteIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_AttachmentDeleteIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).AttachmentDeleteIds(ctx, req.(*DeleteIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_AttachmentQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).AttachmentQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_AttachmentQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).AttachmentQuery(ctx, req.(*QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_AttachmentQueryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAttachmentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).AttachmentQueryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_AttachmentQueryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).AttachmentQueryList(ctx, req.(*QueryAttachmentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_AttaFileCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttaFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).AttaFileCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_AttaFileCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).AttaFileCreate(ctx, req.(*CreateAttaFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_AttaFileDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).AttaFileDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_AttaFileDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).AttaFileDelete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_AttaFileDeleteIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).AttaFileDeleteIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_AttaFileDeleteIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).AttaFileDeleteIds(ctx, req.(*DeleteIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_AttaFileQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).AttaFileQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_AttaFileQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).AttaFileQuery(ctx, req.(*QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _H5RpcService_AttaFileQueryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAttaFileListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(H5RpcServiceServer).AttaFileQueryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: H5RpcService_AttaFileQueryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(H5RpcServiceServer).AttaFileQueryList(ctx, req.(*QueryAttaFileListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// H5RpcService_ServiceDesc is the grpc.ServiceDesc for H5RpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var H5RpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "h5.H5RpcService",
	HandlerType: (*H5RpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LabelCreate",
			Handler:    _H5RpcService_LabelCreate_Handler,
		},
		{
			MethodName: "LabelUpdate",
			Handler:    _H5RpcService_LabelUpdate_Handler,
		},
		{
			MethodName: "LabelDelete",
			Handler:    _H5RpcService_LabelDelete_Handler,
		},
		{
			MethodName: "LabelDeleteIds",
			Handler:    _H5RpcService_LabelDeleteIds_Handler,
		},
		{
			MethodName: "LabelQuery",
			Handler:    _H5RpcService_LabelQuery_Handler,
		},
		{
			MethodName: "LabelQueryList",
			Handler:    _H5RpcService_LabelQueryList_Handler,
		},
		{
			MethodName: "LabelUpdateStatus",
			Handler:    _H5RpcService_LabelUpdateStatus_Handler,
		},
		{
			MethodName: "MiniSiteUserCreate",
			Handler:    _H5RpcService_MiniSiteUserCreate_Handler,
		},
		{
			MethodName: "MiniSiteUserUpdate",
			Handler:    _H5RpcService_MiniSiteUserUpdate_Handler,
		},
		{
			MethodName: "MiniSiteUserDelete",
			Handler:    _H5RpcService_MiniSiteUserDelete_Handler,
		},
		{
			MethodName: "MiniSiteUserDeleteIds",
			Handler:    _H5RpcService_MiniSiteUserDeleteIds_Handler,
		},
		{
			MethodName: "MiniSiteUserQuery",
			Handler:    _H5RpcService_MiniSiteUserQuery_Handler,
		},
		{
			MethodName: "MiniSiteUserQueryList",
			Handler:    _H5RpcService_MiniSiteUserQueryList_Handler,
		},
		{
			MethodName: "MiniSiteUserUpdateStatus",
			Handler:    _H5RpcService_MiniSiteUserUpdateStatus_Handler,
		},
		{
			MethodName: "ArticleCreate",
			Handler:    _H5RpcService_ArticleCreate_Handler,
		},
		{
			MethodName: "ArticleUpdate",
			Handler:    _H5RpcService_ArticleUpdate_Handler,
		},
		{
			MethodName: "ArticleDelete",
			Handler:    _H5RpcService_ArticleDelete_Handler,
		},
		{
			MethodName: "ArticleDeleteIds",
			Handler:    _H5RpcService_ArticleDeleteIds_Handler,
		},
		{
			MethodName: "ArticleQuery",
			Handler:    _H5RpcService_ArticleQuery_Handler,
		},
		{
			MethodName: "ArticleQueryListQueryIds",
			Handler:    _H5RpcService_ArticleQueryListQueryIds_Handler,
		},
		{
			MethodName: "ArticleQueryList",
			Handler:    _H5RpcService_ArticleQueryList_Handler,
		},
		{
			MethodName: "ArticleQueryRecommendList",
			Handler:    _H5RpcService_ArticleQueryRecommendList_Handler,
		},
		{
			MethodName: "ArticleUpdateStatus",
			Handler:    _H5RpcService_ArticleUpdateStatus_Handler,
		},
		{
			MethodName: "ArticleBindArticleLabels",
			Handler:    _H5RpcService_ArticleBindArticleLabels_Handler,
		},
		{
			MethodName: "ArticleUnBindArticleLabels",
			Handler:    _H5RpcService_ArticleUnBindArticleLabels_Handler,
		},
		{
			MethodName: "RelatedSitesCreate",
			Handler:    _H5RpcService_RelatedSitesCreate_Handler,
		},
		{
			MethodName: "RelatedSitesUpdate",
			Handler:    _H5RpcService_RelatedSitesUpdate_Handler,
		},
		{
			MethodName: "RelatedSitesDelete",
			Handler:    _H5RpcService_RelatedSitesDelete_Handler,
		},
		{
			MethodName: "RelatedSitesDeleteIds",
			Handler:    _H5RpcService_RelatedSitesDeleteIds_Handler,
		},
		{
			MethodName: "RelatedSitesQuery",
			Handler:    _H5RpcService_RelatedSitesQuery_Handler,
		},
		{
			MethodName: "RelatedSitesQueryIds",
			Handler:    _H5RpcService_RelatedSitesQueryIds_Handler,
		},
		{
			MethodName: "RelatedSitesQueryList",
			Handler:    _H5RpcService_RelatedSitesQueryList_Handler,
		},
		{
			MethodName: "AttachmentCreate",
			Handler:    _H5RpcService_AttachmentCreate_Handler,
		},
		{
			MethodName: "AttachmentUpdate",
			Handler:    _H5RpcService_AttachmentUpdate_Handler,
		},
		{
			MethodName: "AttachmentDelete",
			Handler:    _H5RpcService_AttachmentDelete_Handler,
		},
		{
			MethodName: "AttachmentDeleteIds",
			Handler:    _H5RpcService_AttachmentDeleteIds_Handler,
		},
		{
			MethodName: "AttachmentQuery",
			Handler:    _H5RpcService_AttachmentQuery_Handler,
		},
		{
			MethodName: "AttachmentQueryList",
			Handler:    _H5RpcService_AttachmentQueryList_Handler,
		},
		{
			MethodName: "AttaFileCreate",
			Handler:    _H5RpcService_AttaFileCreate_Handler,
		},
		{
			MethodName: "AttaFileDelete",
			Handler:    _H5RpcService_AttaFileDelete_Handler,
		},
		{
			MethodName: "AttaFileDeleteIds",
			Handler:    _H5RpcService_AttaFileDeleteIds_Handler,
		},
		{
			MethodName: "AttaFileQuery",
			Handler:    _H5RpcService_AttaFileQuery_Handler,
		},
		{
			MethodName: "AttaFileQueryList",
			Handler:    _H5RpcService_AttaFileQueryList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "h5.proto",
}
